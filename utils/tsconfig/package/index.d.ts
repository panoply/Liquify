import alias from '@rollup/plugin-alias';
import commonjs from '@rollup/plugin-commonjs';
import json from '@rollup/plugin-json';
import resolve from '@rollup/plugin-node-resolve';
import replace from '@rollup/plugin-replace';
import copy from 'rollup-plugin-copy';
import del from 'rollup-plugin-delete';
import { terser } from 'rollup-plugin-terser';
export { defineConfig as rollup } from 'rollup';
export { config, env, banner, jsonmin, date } from '@liquify/rollup-utils';
export declare const plugin: {
    readonly alias: typeof alias;
    readonly beep: any;
    readonly copy: typeof copy;
    readonly commonjs: typeof commonjs;
    readonly del: typeof del;
    readonly esbuild: (options?: import("rollup-plugin-esbuild").Options) => import("rollup").Plugin;
    readonly filesize: (options?: import("rollup-plugin-filesize").FileSizePluginOptions) => import("rollup").Plugin;
    readonly json: typeof json;
    readonly resolve: typeof resolve;
    readonly replace: typeof replace;
    readonly esminify: (options?: {
        sourceMap?: boolean;
        minify?: boolean;
        minifyWhitespace?: boolean;
        minifyIdentifiers?: boolean;
        minifySyntax?: boolean;
        keepNames?: boolean;
        legalComments?: "none" | "external" | "inline" | "linked" | "eof";
        target?: string | string[];
    }) => import("rollup").Plugin;
    readonly terser: typeof terser;
};
