<h1>Grammars</h1>
<p>No formal grammar exists for Liquid, its just a templating language but in order to provide features like diagnostics, validations, linting, formatting and other capabiltites to your text editor the <a href="#">parser</a> Liquify uses provides a way to express the structure of Liquid syntax and compose parseable grammars.</p>
<p>If you're used tools like <a href="https://en.wikipedia.org/wiki/ANTLR">ANTLR</a> to create context-free grammars for parsing you'll find the approach to generating or extending upon the available Liquid Specifications a little different. In Liquify, users can compose grammars that extend upon existing variations by supplying custom specs from within their projects workspace configuration file (<code>.liquidrc</code>) using the <code>context[]</code> property available via <code>specs{}</code> option.</p>
<h2><code>context[]</code></h2>
<p>Tags and Filters can take advantage of the <code>context[]</code> property to express the formation and structure of Liquid token syntax. Tag and Filter contexts are expressed using a simple metasyntax notation:</p>
<table>
<thead>
<tr>
<th>Keyword</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$keyword</code></td>
<td><code>tag_name</code></td>
</tr>
<tr>
<td><code>$variable</code></td>
<td><code>variable</code></td>
</tr>
<tr>
<td><code>$operator</code></td>
<td><code>[&lt;&gt;=!]</code>, <code>and</code>, <code>or</code></td>
</tr>
<tr>
<td><code>$array</code></td>
<td><code>array[0]</code> <em>or</em> <code>array[variable]</code></td>
</tr>
<tr>
<td><code>$object</code></td>
<td><code>object.property</code></td>
</tr>
<tr>
<td><code>$string</code></td>
<td><code>&quot;string&quot;</code> <em>or</em> <code>'string'</code></td>
</tr>
<tr>
<td><code>$boolean</code></td>
<td><code>true</code> <em>or</em> <code>false</code></td>
</tr>
<tr>
<td><code>$number</code></td>
<td><code>[0-9]</code></td>
</tr>
<tr>
<td><code>$parenthesis</code></td>
<td><code>(</code> <em>or</em> <code>)</code></td>
</tr>
<tr>
<td><code>$colon</code></td>
<td><code>:</code></td>
</tr>
<tr>
<td><code>$comma</code></td>
<td><code>,</code></td>
</tr>
<tr>
<td><code>$dot</code></td>
<td><code>.</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>Curious readers that find themselves here, you're best to checkout the Liquify docs on <a href="#">extending variations</a> which documents extending</p>
</blockquote>
