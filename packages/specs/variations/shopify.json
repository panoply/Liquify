{
  "engine": "shopify",
  "updated": "14-05-2021",
  "filters": {
    "asset_img_url": {
      "description": "Returns the asset URL of an image in the \"assets\" folder of a theme. asset_img_url accepts an image size parameter.\n\nYou can specify only a width or only a height and Shopify will calculate the other dimension based on the original image size, keeping the original image's aspect ratio.",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#asset_img_url",
      "arguments": [
        {
          "type": "argument",
          "accepts": "string|reference",
          "options": [
            {
              "name": "master",
              "description": "The original image size"
            }
          ]
        },
        {
          "type": "parameter",
          "name": "crop",
          "description": "You can specify a crop parameter to make sure that the resulting image's dimensions match the requested dimensions. If the entire image won't fit in your requested dimensions, the crop parameter specifies what part of the image to show",
          "required": false,
          "accepts": "string|reference",
          "validate": true,
          "options": [
            {
              "name": "top"
            },
            {
              "name": "center"
            },
            {
              "name": "bottom"
            },
            {
              "name": "left"
            },
            {
              "name": "right"
            }
          ]
        },
        {
          "type": "parameter",
          "name": "scale",
          "description": "The scale parameter lets you specify the pixel density of the image",
          "accepts": "integer|reference",
          "validate": true,
          "options": [
            {
              "name": "2"
            },
            {
              "name": "3"
            }
          ]
        },
        {
          "type": "parameter",
          "name": "format",
          "description": "The format parameter lets you specify what file format to use for the displayed image.",
          "accepts": "string|reference",
          "validate": true,
          "options": [
            {
              "name": "jpg"
            },
            {
              "name": "pjpg",
              "description": "pjpg is progressive JPEG. A browser loads a full-sized progressive JPEG with gradually increasing quality, instead of loading the full-quality image from top to bottom like a traditional JPEG."
            }
          ]
        }
      ]
    },
    "asset_url": {
      "description": "Returns the URL of a file in the \"assets\" folder of a theme.",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#asset_url"
    },
    "currency_selector": {
      "description": "Generates a drop-down list that customers can use to select an accepted currency on your storefront. This filter must be used on the form object within a currency form",
      "link": "https://help.shopify.com/en/themes/liquid/filters/html-filters#currency_selector",
      "snippet": "class: $1, id: $2",
      "within": "form",
      "arguments": [
        {
          "type": "parameter",
          "name": "format",
          "required": false,
          "accepts": "string|reference"
        },
        {
          "type": "parameter",
          "name": "id",
          "description": "The id to be applied",
          "required": false,
          "accepts": "string|reference"
        }
      ]
    },
    "customer_login_link": {
      "description": "Generates a link to the customer login page.",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#customer_login_link"
    },
    "file_img_url": {
      "description": "Returns the URL of an image in the Files page of the admin. file_img_url accepts an image size parameter.",
      "snippet": "${1|file_img_url|file_img_url: ${2}}",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#file_img_url"
    },
    "file_url": {
      "description": "Returns the URL of a file in the Files page of the admin.",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#file_url"
    },
    "font_face": {
      "description": "Returns a CSS @font-face declaration to load the chosen font",
      "link": "https://help.shopify.com/en/themes/liquid/filters/font-filters#font_face",
      "arguments": [
        {
          "type": "parameter",
          "name": "font_display",
          "description": "The font-display descriptor determines how a font face is displayed based on whether and when it is downloaded and ready to use",
          "accepts": "string|reference",
          "validate": true,
          "options": [
            {
              "name": "auto",
              "description": "The font display strategy is defined by the user agent."
            },
            {
              "name": "block",
              "description": "Gives the font face a short block period and an infinite swap period."
            },
            {
              "name": "swap",
              "description": "Gives the font face an extremely small block period and an infinite swap period."
            },
            {
              "name": "fallback",
              "description": "Gives the font face an extremely small block period and a short swap period."
            },
            {
              "name": "optional",
              "description": "Gives the font face an extremely small block period and no swap period."
            }
          ]
        }
      ]
    },
    "font_modify": {
      "description": "font_modify takes two arguments. The first indicates which property should be modified and the second is the modification to be made.",
      "snippet": "font_modify:  '${1|normal,italic,oblique|}', '${2|100,200,300,400,500,600,700,800,900,lighter,normal,bold,bolder|}'",
      "link": "https://help.shopify.com/en/themes/liquid/filters/font-filters#font_face",
      "arguments": [
        {
          "type": "spread",
          "name": "style",
          "accepts": "string|reference",
          "validate": true,
          "options": [
            {
              "name": "normal",
              "description": "Returns the normal variant of the same weight (if it exists)"
            },
            {
              "name": "italic",
              "description": "Returns the italic variant of the same weight (if it exists)"
            },
            {
              "name": "oblique",
              "description": "Has the same behavior as italic. None of the font families provided by Shopify have both italic and oblique styles."
            }
          ]
        },
        {
          "type": "spread",
          "name": "weight",
          "accepts": "string|reference",
          "validate": true,
          "options": [
            {
              "name": "R:[1-8]0{2}",
              "description": "Returns a variant of the same style with the given weight (if it exists)."
            },
            {
              "name": "R:\\+[1-8]0{2}",
              "description": "Returns an incrementally bolder font of the same style (if it exists). For example, if font has a weight of 400, then font | font_modify \"weight\", \"+100\" returns the variant with a weight of 500 for the same style."
            },
            {
              "name": "R:-[1-8]0{2}",
              "description": "Returns an incrementally lighter font of the same style (if it exists). For example, if font has a weight of 400, then font | font_modify \"weight\", \"-100\" returns the variant with a weight of 300 for the same style."
            }
          ]
        }
      ]
    },
    "font_url": {
      "description": "Returns a CDN URL for the chosen font. By default, font_url returns the woff2 version, but it can also be called with an additional parameter to specify the format. Both woff and woff2 are supported.",
      "snippet": "${1|font_url|font_url: 'woff'}",
      "link": "https://help.shopify.com/en/themes/liquid/filters/font-filters#font_face",
      "arguments": [
        {
          "type": "argument",
          "accepts": "string|reference"
        }
      ]
    },
    "global_asset_url": {
      "description": "Returns the URL of a global asset. Global assets are kept in a central directory on Shopifyâ€™s servers. Using global assets can improve the load times of your pages.",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#global_asset_url"
    },
    "img_tag": {
      "description": "Generates an image tag.",
      "link": "https://help.shopify.com/themes/liquid/filters/html-filters#img_tag"
    },
    "img_url": {
      "description": "Returns the URL of an image. Accepts an image size as a parameter.",
      "snippet": "${1|img_url|img_url: ${2}}",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#img_url"
    },
    "link_to": {
      "description": "Generates an HTML link. The first parameter is the URL of the link, and the optional second parameter is the title of the link.",
      "snippet": "link_to: '${1:url}', '${2:title}'",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#link_to",
      "arguments": [
        {
          "type": "argument",
          "required": true,
          "accepts": "string|reference"
        },
        {
          "type": "argument",
          "required": false,
          "accepts": "string|reference"
        }
      ]
    },
    "link_to_add_tag": {
      "description": "Creates a link to all products in a collection that have a given tag as well as any tags that have been already selected.",
      "snippet": "link_to_add_tag: ${1}",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#link_to_add_tag",
      "arguments": [
        {
          "type": "argument",
          "required": true,
          "accepts": "string|reference"
        }
      ]
    },
    "link_to_remove_tag": {
      "description": "Generates a link to all products in a collection that have the given tag and all the previous tags that might have been added already.",
      "snippet": "link_to_remove_tag: ${1}",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#link_to_remove_tag",
      "arguments": [
        {
          "type": "argument",
          "required": true,
          "accepts": "string|reference"
        }
      ]
    },
    "link_to_tag": {
      "description": "Creates a link to all products in a collection that have a given tag.",
      "snippet": "link_to_tag: ${1}",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#link_to_tag",
      "arguments": [
        {
          "type": "argument",
          "required": true,
          "accepts": "string|reference"
        }
      ]
    },
    "link_to_type": {
      "description": "Creates an HTML link to a collection page that lists all products belonging to a product type.",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#link_to_type"
    },
    "link_to_vendor": {
      "description": "Creates an HTML link to a collection page that lists all products belonging to a vendor.",
      "snippet": "link_to_vendor",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#link_to_vendor"
    },
    "money": {
      "description": "Formats the price based on the shopâ€™s `HTML without currency` setting",
      "link": "https://help.shopify.com/en/themes/liquid/filters/money-filters#money"
    },
    "money_with_currency": {
      "description": "Formats the price based on the shopâ€™s `HTML with currency` setting.",
      "link": "https://help.shopify.com/en/themes/liquid/filters/money-filters#money_with_currency"
    },
    "money_without_currency": {
      "description": "Formats the price using a decimal.",
      "link": "https://help.shopify.com/en/themes/liquid/filters/money-filters#money_without_currency"
    },
    "money_without_trailing_zeros": {
      "description": "Formats the price based on the shopâ€™s `HTML with currency` setting and excludes the decimal point and trailing zeros.",
      "link": "https://help.shopify.com/en/themes/liquid/filters/money-filters#money_without_trailing_zeros"
    },
    "payment_button": {
      "description": "Creates a dynamic checkout button for a product. This filter must be used on the form object within a product form.",
      "link": "https://help.shopify.com/themes/liquid/filters/html-filters#payment_button"
    },
    "payment_type_img_url": {
      "description": "Returns the URL of the payment typeâ€™s SVG image. Used in conjunction with the shop.enabled_payment_types variable.",
      "snippet": "link_to_remove_tag: ${1}",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#payment_type_img_url"
    },
    "payment_type_svg_tag": {
      "description": "Returns the `<svg>` tag of the requested payment type image for inlining purposes. Used in conjunction with the `shop.enabled_payment_types` variable.",
      "snippet": "class: ${1}",
      "link": "https://help.shopify.com/themes/liquid/filters/html-filters#payment_button"
    },
    "script_tag": {
      "description": "Generates a script tag.",
      "link": "https://help.shopify.com/themes/liquid/filters/html-filters#payment_button"
    },
    "shopify_asset_url": {
      "description": "Returns the URL of a global assets that are found on Shopifyâ€™s servers.",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#shopify_asset_url"
    },
    "sort_by": {
      "description": "Creates a URL to a collection page with the provided sort_by parameter. This filter must be applied to a collection URL.",
      "snippet": "sort_by: ${1}",
      "link": "https://help.shopify.com/en/themes/liquid/filters/url-filters#sort_by"
    },
    "stylesheet_tag": {
      "description": "Generates a link tag that points to the given stylesheet.",
      "link": "https://help.shopify.com/themes/liquid/filters/html-filters#payment_button"
    },
    "url_for_type": {
      "description": "Creates a URL that links to a collection page containing products with a specific product type.",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#url_for_type"
    },
    "url_for_vendor": {
      "description": "Creates a URL that links to a collection page containing products with a specific product vendor.",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#url_for_vendor"
    },
    "within": {
      "description": "Creates a collection-aware product URL by prepending /collections/collection-handle to a product URL, where collection-handle is the handle of the collection that is currently being viewed.",
      "snippet": "within: ${1}",
      "link": "https://help.shopify.com/themes/liquid/filters/url-filters#within"
    }
  },

  "objects": {
    "additional_checkout_buttons": {
      "description": "Returns true if a merchant's store has any payment providers with offsite checkouts, such as PayPal Express Checkout. Use additional_checkout_buttons to check whether these gateways exist, and content_for_additional_checkout_buttons to show the additional buttons.",
      "filters": false,
      "trims": false,
      "type": "boolean",
      "link": "https://help.shopify.com/en/themes/liquid/objects#additional-checkout-buttons"
    },
    "address": {
      "description": "The address object contains information entered by a customer in Shopify's checkout pages.",
      "type": "object",
      "properties": {
        "province_code": {
          "description": "Returns the abbreviated value of the Province/State field of the address.",
          "type": "string"
        },
        "street": {
          "description": "Returns the combined values of the Address1 and Address2 fields of the address.",
          "type": "string"
        },
        "url": {
          "description": "Returns the relative URL of the address.",
          "type": "string"
        },
        "address1": {
          "description": "Returns the value of the Address1 field of the address.",
          "type": "string"
        },
        "address2": {
          "description": "Returns the value of the Address2 field of the address.",
          "type": "string"
        },
        "city": {
          "description": "Returns the value of the City field of the address.",
          "type": "string"
        },
        "company": {
          "description": "Returns the value of the Company field of the address.",
          "type": "string"
        },
        "country_code": {
          "description": "Returns the value of the Country field of the address in ISO 3166-2 standard format.",
          "type": "string"
        },
        "country": {
          "description": "Returns the value of the Country field of the address.",
          "type": "string"
        },
        "first_name": {
          "description": "Returns the value of the First Name field of the address.",
          "type": "string"
        },
        "last_name": {
          "description": "Returns the value of the Last Name field of the address.",
          "type": "string"
        },
        "phone": {
          "description": "Returns the value of the Phone field of the address.",
          "type": "string"
        },
        "zip": {
          "description": "Returns the value of the Postal/Zip field of the address.",
          "type": "string"
        },
        "province": {
          "description": "Returns the value of the Province/State field of the address.",
          "type": "string"
        },
        "name": {
          "description": "Returns the values of the First Name and Last Name fields of the address.",
          "type": "string"
        }
      },
      "link": "https://help.shopify.com/en/themes/liquid/objects/address"
    },
    "all_country_option_tags": {
      "description": "The all_country_option_tags object creates an <option> tag for each country. An attribute called data-provinces is set for each <option>, and contains a JSON-encoded array of the country's subregions. If a country doesn't have any subregions, then an empty array is set for its data-provinces attribute.",
      "filters": false,
      "link": "https://help.shopify.com/themes/liquid/objects#all_products",
      "type": "array"
    },
    "all_products": {
      "description": "Returns a list of all the products in your store. You can use all_products to access products by their handles.",
      "link": "https://help.shopify.com/themes/liquid/objects#all_products",
      "type": "array"
    },
    "article": {
      "description": "Returns a list of all the blog articles in a store.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Returns all the tags for the article.",
          "type": "array"
        },
        "user": {
          "description": "Returns an object with information about the article's author.",
          "type": "object",
          "properties": {
            "bio": {
              "description": "Returns the bio of the author of the article.",
              "type": "string"
            },
            "email": {
              "description": "Returns the email of the author of the article.",
              "type": "string"
            },
            "first_name": {
              "description": "Returns the first name of the author of the article.",
              "type": "string"
            },
            "homepage": {
              "description": "Returns the home page of the article author.",
              "type": "string"
            },
            "image": {
              "description": "Returns the image object of the author of the article.",
              "type": "object",
              "properties": {
                "alt": {
                  "description": "Returns the article image's alt text.",
                  "type": "string"
                },
                "src": {
                  "description": "Returns the relative URL to the article image.",
                  "type": "string"
                }
              }
            },
            "last_name": {
              "description": "Returns the last name of the author of the article.",
              "type": "string"
            },
            "account_owner": {
              "description": "Returns true if the author of the article is the account owner of the store. Returns false if the author is not the account owner.",
              "type": "string"
            }
          }
        },
        "excerpt_or_content": {
          "description": "Returns article.excerpt of the article if it exists. Returns article.content if an excerpt does not exist for the article.",
          "type": "string"
        },
        "image": {
          "description": "Returns the article's image object.",
          "name": "image",
          "properties": {
            "alt": {
              "description": "Returns the article image's alt text.",
              "type": "string"
            },
            "src": {
              "description": "Returns the relative URL to the article image.",
              "type": "string"
            }
          }
        },
        "content": {
          "description": "Returns the content of the article."
        },
        "excerpt": {
          "description": "Returns the excerpt of the article."
        },
        "author": {
          "description": "Returns the full name of the article's author."
        },
        "handle": {
          "description": "Returns the handle of the article."
        },
        "id": {
          "description": "Returns the id of the article."
        },
        "comments_count": {
          "description": "Returns the number of published comments for the article."
        },
        "comments": {
          "description": "Returns the published comments of the article. Returns an empty array if comments are disabled."
        },
        "url": {
          "description": "Returns the relative URL of the article.",
          "type": "string"
        },
        "comment_post_url": {
          "description": "Returns the relative URL where POST requests are sent to when creating new comments.",
          "type": "string"
        },
        "created_at": {
          "description": "Returns the timestamp of when the article was created. Use the date filter to format the timestamp.",
          "type": "string"
        },
        "title": {
          "description": "Returns the title of the article.",
          "type": "string"
        },
        "comments_enabled": {
          "description": "Returns true if comments are enabled. Returns false if comments are disabled.",
          "type": "boolean"
        },
        "moderated": {
          "description": "Returns true if the blog that the article belongs to is set to moderate comments. Returns false if the blog is not moderated.",
          "type": "boolean"
        }
      },
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects#articles"
    },
    "block": {
      "description": "A block represents the content and settings of a single block in an array of section blocks. The block object can be accessed in a section file by looping through section.blocks.",
      "type": "object",
      "properties": {
        "shopify_attributes": {
          "description": "Returns a string representing the block's attributes."
        },
        "id": {
          "description": "Returns a unique ID dynamically generated by Shopify."
        },
        "settings": {
          "description": "Returns an object of the block settings set in the theme editor. Retrieve setting values by referencing the setting's unique id."
        },
        "type": {
          "description": "Returns the type defined in the block's schema. This is useful for displaying different markup based on the block.type."
        }
      },
      "link": "https://help.shopify.com/en/themes/liquid/objects/block"
    },
    "blog": {
      "description": "Blog object",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Returns all tags in a blog. Similar to all_tags, but only returns tags of articles that are in the filtered view.",
          "type": "array"
        },
        "all_tags": {
          "description": "Returns all tags of all articles of a blog. This includes tags of articles that are not in the current pagination view.",
          "type": "array"
        },
        "articles": {
          "description": "Returns an array of all articles in a blog.",
          "type": "array"
        },
        "handle": {
          "description": "Returns the handle of the blog.",
          "type": "string"
        },
        "id": {
          "description": "Returns the id of the blog.",
          "type": "integer"
        },
        "next_article": {
          "description": "Returns the next (older) article. Returns nil if there is no next article.",
          "type": "string"
        },
        "previous_article": {
          "description": "Returns the previous (newer) article. Returns nil if there is no next article.",
          "type": "string"
        },
        "link": {
          "description": "Returns the relative URL of the blog.",
          "type": "string"
        },
        "title": {
          "description": "Returns the title of the blog.",
          "type": "string"
        },
        "articles_count": {
          "description": "Returns the total number of articles in a blog. This total does not include hidden articles.",
          "type": "integer"
        },
        "comments_enabled": {
          "description": "Returns true if comments are enabled, or false if they are disabled.",
          "type": "boolean"
        },
        "moderated": {
          "description": "Returns true if comments are moderated, or false if they are not moderated.",
          "type": "boolean"
        }
      },
      "link": "https://help.shopify.com/themes/liquid/objects#blogs"
    },
    "canonical_url": {
      "type": "object",
      "description": "Returns the canonical URL of the current page. A page's canonical URL is the page's default URL without any URL parameters. For products and variants, the canonical URL is the default product page with no collection or variant selected.",
      "filters": false,
      "link": "https://help.shopify.com/themes/liquid/objects#canonical_url"
    },
    "cart": {
      "description": "Cart object",
      "type": "object",
      "properties": {
        "attributes": {
          "description": "Cart attributes allow the capturing of more information on the cart page."
        },
        "items": {
          "description": "Returns all of the line items in the cart.",
          "name": "items"
        },
        "cart_level_discount_applications": {
          "description": "Returns an array of any cart-specific discount applications for the cart.",
          "type": "array"
        },
        "discount_applications": {
          "description": "Returns an array of discount applications for the cart.",
          "type": "array"
        },
        "currency": {
          "description": "Returns the currency of the cart. If your store uses multi-currency, then the cart.currency is the same as the customer's local (presentment) currency. Otherwise, the cart currency is the same as your store currency."
        },
        "item_count": {
          "description": "Returns the number of items inside the cart.",
          "type": "integer"
        },
        "original_total_price": {
          "description": "Returns the subtotal of the cart before any discounts have been applied.",
          "type": "integer"
        },
        "items_subtotal_price": {
          "description": "Returns the sum of the cart's line-item prices after any line-item discount. The subtotal doesn't include taxes (unless taxes are included in the prices), cart discounts, or shipping costs.",
          "type": "integer"
        },
        "total_discount": {
          "description": "Returns the total of all discounts (the amount saved) for the cart.",
          "type": "integer"
        },
        "total_price": {
          "description": "Returns the total price of all of the items in the cart after discounts have been applied.",
          "type": "integer"
        },
        "total_weight": {
          "description": "Returns the total weight of all of the items in the cart.",
          "type": "integer"
        },
        "note": {
          "description": "cart.note allows the capturing of more information on the cart page.",
          "type": "string"
        }
      },
      "link": "https://help.shopify.com/themes/liquid/objects#canonical_url"
    },
    "collection": {
      "filters": false,
      "type": "object",
      "description": "Returns a collection",
      "properties": {
        "all_tags": {
          "description": "Returns a list of all product tags in a collection. collection.all_tags will return the full list of tags even when the collection view is filtered. collection.all_tags will return at most 1,000 tags",
          "type": "array"
        },
        "all_types": {
          "description": "Returns a list of all product types in a collection",
          "type": "array"
        },
        "all_vendors": {
          "description": "Returns a list of all product vendors in a collection.",
          "type": "array"
        },
        "products": {
          "description": "Returns all of the products in a collection. You can show a maximum of 50 products per page. Use the paginate tag to choose how many products are shown per page",
          "type": "array"
        },
        "sort_options": {
          "description": "Returns an array of sorting options for the collection",
          "type": "array"
        },
        "id": {
          "description": "Returns the ID number of the collection.",
          "type": "integer"
        },
        "link": {
          "description": "Returns the URL of the collection",
          "type": "string"
        },
        "handle": {
          "description": "Returns the collection's handle",
          "type": "string"
        },
        "published_at": {
          "description": "Returns the date and time when the collection was published. You can set this information on the collection's page in your Shopify admin by the Set publish date calendar icon. You can use a date filter to format the date",
          "type": "string"
        },
        "description": {
          "description": "Returns the description of the collection",
          "type": "string"
        },
        "image": {
          "description": "Returns the image of the collection",
          "type": "string"
        },
        "template_suffix": {
          "description": "Returns the name of the custom collection template assigned to the `collection`, without the collection. prefix or the `.liquid` extension. Returns `nil` if a custom template is not assigned to the collection.",
          "type": "string"
        },
        "next_product": {
          "description": "Returns the next product in the collection. Returns `nil` if there is no next product",
          "type": "string"
        },
        "products_count": {
          "description": "Returns the number of products in a collection that match the current view. For example, if you are viewing a collection filtered by tag, collection.`products_count` will return the number of products that match the chosen tag.",
          "type": "integer"
        },
        "all_products_count": {
          "description": "Returns the number of products in a collection. collection.all_products_count will return the total number of products even when the collection view is filtered.",
          "type": "integer"
        },
        "previous_product": {
          "description": "Returns the previous product in the collection. Returns `nil` if there is no previous product.",
          "type": "string"
        },
        "current_type": {
          "description": "Returns the product type on a `/collections/types?q=TYPE` collection page. For example, you may be on the automatic Shirts collection, which lists all products of type â€˜shirtsâ€™ in the store: `myshop.shopify.com/collections/types?q=Shirts`",
          "type": "string"
        },
        "sort_by": {
          "description": "Returns the sort order applied to the collection by the `sort_by` URL parameter. When there is no `sort_by` URL parameter, the value is null.",
          "type": "string"
        },
        "default_sort_by": {
          "description": "Returns the sort order of the collection, which is set in the collection pages of the Admin",
          "type": "string"
        },
        "tags": {
          "description": "Returns the tags of products in a collection that match the current view. For example, if you are viewing a collection filtered by tag, `collection.tags` will return the tags for the products that match the current filter",
          "type": "array"
        },
        "title": {
          "description": "Returns the title of the collection",
          "type": "string"
        },
        "current_vendor": {
          "description": "Returns the vendor name on a `/collections/vendors?q=VENDOR` collection page. For example, you may be on the automatic Shopify collection, which lists all products with vendor â€˜shopifyâ€™ in the store: `myshop.shopify.com/collections/vendors?q=Shopify`",
          "type": "string"
        }
      },
      "link": "https://help.shopify.com/themes/liquid/objects#collection"
    },
    "collections": {
      "type": "array",
      "description": "Returns a list of all of the collections in a store",
      "filters": false,
      "link": "https://help.shopify.com/themes/liquid/objects#collections"
    },
    "comment": {
      "type": "object",
      "filters": false,
      "description": "Article Comment",
      "properties": {
        "link": {
          "description": "Returns the URL of the article with `comment.id` appended to it. This is so the page will automatically scroll to the comment"
        },
        "author": {
          "description": "Returns the author of the comment",
          "type": "string"
        },
        "content": {
          "description": "Returns the content of the comment",
          "type": "string"
        },
        "email": {
          "description": "Returns the e-mail address of the comment's author"
        },
        "id": {
          "description": "Returns the id (unique identifier) of the comment"
        },
        "status": {
          "description": "Returns the status of the comment"
        },
        "created_at": {
          "description": "Returns the timestamp of when the comment was submitted. Use the `date` filter to convert the timestamp into a more readable format"
        },
        "updated_at": {
          "description": "Returns the timestamp of when the comment's status was last changed. For example, the timestamp of when a comment was approved by the article's author. Use the `date` filter to convert the timestamp into a more readable format"
        }
      },
      "link": "https://help.shopify.com/themes/liquid/objects/comment"
    },
    "content_for_additional_checkout_buttons": {
      "const": true,
      "type": "variable",
      "description": "Returns checkout buttons for any active payment providers with offsite checkouts. The \"additional_checkout_buttons\" and \"content_for_additional_checkout_buttons\" are used in many Shopify themes.",
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects#content_for_additional_checkout_buttons"
    },
    "content_for_header": {
      "const": true,
      "type": "variable",
      "description": "The content_for_header object is required in theme.liquid. It must be placed inside the HTML <head> tag. It dynamically loads all scripts required by Shopify into the document head. These scripts include Shopify analytics, Google Analytics, and scripts required for Shopify apps.",
      "link": "https://help.shopify.com/en/themes/liquid/objects#content-objects"
    },
    "content_for_index": {
      "const": true,
      "type": "variable",
      "description": "The content_for_index object contains the content of dynamic sections to be rendered on the home page. This object must be included in templates/index.liquid.",
      "link": "https://help.shopify.com/en/themes/liquid/objects#content-for-index"
    },
    "content_for_layout": {
      "const": true,
      "type": "variable",
      "description": "The content_for_layout object is required in theme.liquid. It must be placed inside the HTML <body> tag. It dynamically loads content generated by other templates such as index.liquid or product.liquid.",
      "link": "https://help.shopify.com/en/themes/liquid/objects#content-for-layout"
    },
    "country_option_tags": {
      "const": true,
      "type": "variable",
      "description": "The country_option_tags object creates an <option> tag for each country that is included as a shipping zone on the Shipping page of the admin. An attribute called data-provinces is set for each <option>, and contains a JSON-encoded array of the country's subregions. If a country doesn't have any subregions, then an empty array is set for its data-provinces attribute",
      "link": "https://help.shopify.com/en/themes/liquid/objects/country-option-tags"
    },
    "currency": {
      "description": "The currency object",
      "filters": false,
      "type": "object",
      "properties": {
        "iso_code": {
          "description": "Returns the ISO code of the currency (for example `USD` or `EUR`)."
        },
        "symbol": {
          "description": "Returns the currency's symbol (for example, `$` or `â‚¬`)."
        },
        "name": {
          "description": "Returns the name of the currency (for example United States dollars or Euro)."
        }
      },
      "link": "https://help.shopify.com/en/themes/liquid/objects/country-option-tags",
      "trims": false
    },
    "current_page": {
      "type": "integer",
      "scope": ["paginate"],
      "description": "current_page returns the number of the page you are on when browsing through paginated content. It can be used outside the paginate block",
      "filters": false,
      "link": "https://help.shopify.com/themes/liquid/objects#collections"
    },
    "current_tags": {
      "type": "array",
      "description": "Product tags are used to filter a collection to only show products that contain a specific product tag. Similarly, article tags are used to filter a blog to only show products that contain a specific article tag. The current_tags variable is an array that contains all tags that are being used to filter a collection or blog.",
      "filters": false,
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/current-tags"
    },
    "customer": {
      "description": "The customer object contains information about a customer who has a customer account",
      "type": "object",
      "properties": {
        "accepts_marketing": {
          "description": "Returns `true` if the customer accepts marketing, returns `false` if the customer does not",
          "type": "boolean"
        },
        "addresses": {
          "description": "Returns an array of all addresses associated with a customer",
          "type": "array"
        },
        "orders": {
          "description": "Returns an array of all orders placed by the customer",
          "type": "array"
        },
        "default_address": {
          "description": "Returns the default customer_address",
          "type": "string"
        },
        "email": {
          "description": "Returns the email address of the customer",
          "type": "string"
        },
        "first_name": {
          "description": "Returns the first name of the customer",
          "type": "string"
        },
        "name": {
          "description": "Returns the full name of the customer",
          "type": "string"
        },
        "id": {
          "description": "Returns the id of the customer",
          "type": "integer"
        },
        "last_name": {
          "description": "Returns the last name of the customer",
          "type": "string"
        },
        "last_order": {
          "description": "Returns the last order placed by the customer, not including test orders",
          "type": "string"
        },
        "tags": {
          "description": "Returns the list of tags associated with the customer",
          "type": "array"
        },
        "addresses_count": {
          "description": "Returns the number of addresses associated with a customer",
          "type": "integer"
        },
        "phone": {
          "description": "Returns the phone number of the customer",
          "type": "string"
        },
        "total_spent": {
          "description": "Returns the total amount spent on all orders",
          "type": "string"
        },
        "orders_count": {
          "description": "Returns the total number of orders a customer has placed",
          "type": "integer"
        },
        "has_account": {
          "description": "Returns true if the email associated with an order is also tied to a customer account. Returns `false` if it is not. Helpful in email templates",
          "type": "boolean"
        },
        "tax_exempt": {
          "description": "Returns whether or not the customer is exempt from taxes",
          "type": "boolean"
        }
      },
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/customer",
      "trims": false
    },
    "customer_address": {
      "description": "The currency object",
      "type": "object",
      "properties": {
        "province_code": {
          "description": "Returns the abbreviated value of the Province/State field of the address"
        },
        "street": {
          "description": "Returns the combined values of the Address1 and Address2 fields of the address"
        },
        "id": {
          "description": "Returns the id of customer address"
        },
        "address1": {
          "description": "Returns the value of the Address1 field of the address"
        },
        "address2": {
          "description": "Returns the value of the Address2 field of the address"
        },
        "city": {
          "description": "Returns the value of the City field of the address"
        },
        "company": {
          "description": "Returns the value of the Company field of the address"
        },
        "country_code": {
          "description": "Returns the value of the Country field of the address in ISO 3166-2 standard format"
        },
        "country": {
          "description": "Returns the value of the Country field of the address"
        },
        "first_name": {
          "description": "Returns the value of the First Name field of the address"
        },
        "last_name": {
          "description": "Returns the value of the Last Name field of the address"
        },
        "phone": {
          "description": "Returns the value of the Phone field of the address"
        },
        "zip": {
          "description": "Returns the value of the Postal/Zip field of the address"
        },
        "province": {
          "description": "Returns the value of the Province/State field of the address"
        }
      },
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/customer-address",
      "trims": false
    },
    "discount_allocation": {
      "type": "object",
      "description": "The `discount_allocation` object contains all of the information about how a particular discount affects a line item and how the price reduces. The object can be accessed on customer order and notification templates. **Shopify Plus** merchants can also access properties of the `discount_allocation` object in the `checkout.liquid` layout file.",
      "properties": {
        "discount_application": {
          "description": "The discount application that allocates the amount on the line item"
        },
        "amount": {
          "description": "The discounted amount on a line item by a particular discount"
        }
      },
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/discount-allocation",
      "trims": false
    },
    "discount_application": {
      "type": "object",
      "description": "The `discount_application` object captures the intent of a `discount applied` on an order. The object can be accessed on customer order and notification templates. **Shopify Plus** merchants can also access properties of the discount_allocation object in the checkout.liquid layout file.",
      "properties": {
        "target_selection": {
          "description": "Describes how a discount selects line items in the cart to be discounted"
        },
        "target_type": {
          "description": "Describes the type of item that a discount applies to. target_type has the following possible values, line_item or shipping_line"
        },
        "title": {
          "description": "The customer-facing name of the discount. For example, `Welcome10` or `CBBWQQAKYBYY`"
        },
        "total_allocated_amount": {
          "description": "The total amount that the price of an order is reduced by the discount"
        },
        "type": {
          "description": "The type of the discount. type has the following possible values:\n\n- automatic\n- manual\n-discount_code\n-script"
        },
        "value": {
          "description": "The value of the discount."
        },
        "value_type": {
          "description": "The value type of the discount. value_type has the following possible values:\n\n- fixed_amount\n- percentagel"
        }
      },
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/discount-application",
      "trims": false
    },
    "external_video": {
      "type": "object",
      "description": "The external_video object can be accessed from the product object's media attribute. It contains information about a YouTube video associated with a product",
      "properties": {
        "external_id": {
          "description": "Returns the ID of the YouTube video"
        },
        "alt": {
          "description": "Returns the alt tag of the video set on the product details page of the Shopify admin"
        },
        "aspect_ratio": {
          "description": "Returns the aspect ratio of the YouTube video"
        },
        "id": {
          "description": "Returns the media_id of the external video."
        },
        "video_host": {
          "description": "Returns the name of the video host (youtube)."
        },
        "position": {
          "description": "Returns the position of the external_video in the product object's media array."
        },
        "media_type": {
          "description": "Returns the type of the object (external_video). This can be used to filter the product object's media array."
        }
      },
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/external-video"
    },
    "font": {
      "type": "object",
      "description": "The font object is used to access the font_picker settings. It can be accessed via the global settings object",
      "properties": {
        "variants": {
          "description": "Returns all of the variants within the font's family. Each of the variants is also a font object",
          "type": "array"
        },
        "family": {
          "description": "Returns the font's name",
          "type": "string"
        },
        "baseline_ratio": {
          "description": "Returns the position of the baseline within the em box (measured from the bottom). You can learn more about baseline ratios in the Plumber SASS documentation"
        },
        "style": {
          "description": "Returns the selected font style",
          "type": "string"
        },
        "weight": {
          "description": "Returns the selected font weight",
          "type": "string"
        },
        "fallback_families": {
          "description": "Returns the suggested fallback font families",
          "type": "string"
        }
      }
    },
    "form": {
      "type": "object",
      "description": "The form object is used within the form tag. It contains attributes of its parent form.",
      "filters": false,
      "scope": ["form"],
      "properties": {
        "address1": {
          "description": "Returns the first address line associated with the address. Exclusive to form tags with the \"address\" parameter."
        },
        "address2": {
          "description": "Returns the second address line associated with the address, if it exists. Exclusive to form tags with the \"address\" parameter."
        },
        "author": {
          "description": "Returns the name of the author of the blog article comment. Exclusive to form tags with the \"article\" parameter."
        },
        "body": {
          "description": "Returns the content of the blog article comment. Exclusive to form tags with the \"article\" parameter."
        },
        "city": {
          "description": "Returns the city associated with the address. Exclusive to form tags with the \"address\" parameter."
        },
        "company": {
          "description": "Returns the company name associated with the address, if it exists. Exclusive to form tags with the \"address\" parameter."
        },
        "country": {
          "description": "Returns the country associated with the address. Exclusive to form tags with the \"address\" parameter."
        },
        "email": {
          "description": "Returns the email of the blog article comment's author. Exclusive to form tags with the \"article\" parameter."
        },
        "errors": {
          "description": "Returns an array of strings if the form was not submitted successfully. The strings returned depend on which fields of the form were left empty or contained errors. Possible values are:\n\n- author\n- body\n- email\n- form\n"
        },
        "first_name": {
          "description": "Returns the first name associated with the address. Exclusive to form tags with the \"address\" parameter."
        },
        "id": {
          "description": "Returns the id (unique identifier) of the form."
        },
        "last_name": {
          "description": "Returns the last name associated with the address. Exclusive to form tags with the \"address\" parameter."
        },
        "password_needed": {
          "description": "Used only for form tags with the \"customer_login\" parameter. The form.password_needed attribute always returns true."
        },
        "phone": {
          "description": "Returns the telephone number associated with the address, if it exists. Exclusive to form tags with the \"address\" parameter."
        },
        "posted_successfully?": {
          "description": "Returns true if the form was submitted successfully, or false if the form contained errors. All forms but the address form set that property. The address form is always submitted successfully."
        },
        "province": {
          "description": "Returns the province or state associated with the address. Exclusive to form tags with the \"address\" parameter."
        },
        "set_as_default_checkbox": {
          "description": "Renders an HTML checkbox that can submit the current form as the customer's default address. Exclusive to form tags with the \"address\" parameter"
        },
        "zip": {
          "description": "Returns the zip code or postal code associated with the address. Exclusive to form tags with the \"address\" parameter."
        }
      }
    },
    "forloop": {
      "scope": ["for"],
      "type": "object",
      "description": "The forloop object contains attributes of its parent for loop.",
      "filters": false,
      "properties": {
        "rindex": {
          "description": "Returns forloop.index in reverse order.",
          "type": "integer"
        },
        "rindex0": {
          "description": "Returns forloop.index0 in reverse order.",
          "type": "integer"
        },
        "index0": {
          "description": "Returns the current index of the for loop, starting at 0.",
          "type": "integer"
        },
        "index": {
          "description": "Returns the current index of the for loop, starting at 1.",
          "type": "integer"
        },
        "length": {
          "description": "Returns the number of iterations of the loop.",
          "type": "integer"
        },
        "first": {
          "description": "Returns true if it's the first iteration of the for loop. Returns false if it is not the first iteration.",
          "type": "boolean"
        },
        "last": {
          "description": "Returns true if it's the last iteration of the for loop. Returns false if it is not the last iteration.",
          "type": "boolean"
        }
      },
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/for-loops",
      "trims": false
    },
    "fulfillment": {
      "type": "object",
      "description": "The fulfillment object",
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/fulfillment",
      "properties": {
        "fulfillment_line_items": {
          "description": "Returns an array of all line items and their quantity included in the fulfillment. Any line items that have already been fulfilled, or are yet to be fulfilled, will not be included in the array."
        },
        "item_count": {
          "description": "Returns the total number of items included in the fulfillment."
        },
        "tracking_company": {
          "description": "Returns the name of the fulfillment service."
        },
        "tracking_number": {
          "description": "Returns a fulfillment's tracking number, if it exists."
        },
        "tracking_url": {
          "description": "Returns the URL for a tracking number."
        }
      }
    },
    "handle": {
      "description": "Returns the handle of the page that is being viewed",
      "link": "https://help.shopify.com/themes/liquid/objects#handle",
      "type": "string",
      "global": true
    },
    "image": {
      "type": "object",
      "description": "The image object returns information about an image.",
      "properties": {
        "variants": {
          "description": "Returns an array of attributes for the variant that the image is associated with.",
          "type": "array"
        },
        "alt": {
          "description": "Returns the alt tag of the image, set in the Products page of the Admin.",
          "type": "string"
        },
        "aspect_ratio": {
          "description": "Returns the aspect ratio (width / height) of the image."
        },
        "height": {
          "description": "Returns the height of the image in pixels."
        },
        "product_id": {
          "description": "Returns the id of the image's product.",
          "type": "integer"
        },
        "id": {
          "description": "Returns the id of the image.",
          "type": "integer"
        },
        "position": {
          "description": "Returns the position of the image, starting at 1. This is the same as outputting forloop.index."
        },
        "src": {
          "description": "Returns the relative path of the product image. This is the same as outputting \"{{ image }}\"."
        },
        "width": {
          "description": "Returns the width of the image in pixels."
        },
        "attached_to_variant": {
          "description": "Returns true if the image has been associated with a variant. Returns false otherwise. This can be used in cases where you want to create a gallery of images that are not associated with variants."
        }
      },
      "link": "https://help.shopify.com/themes/liquid/objects#image"
    },
    "line_item": {
      "type": "object",
      "description": "A line_item represents a single line in the shopping cart. There is one line item for each distinct product variant in the cart. The line_item object can be accessed in all Liquid templates via cart.items",
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/line_item",
      "properties": {
        "discount_allocations": {
          "type": "array",
          "description": "Returns a list of all discount allocations containing the discounted amount and the reference to the parent discount application. line_item.discount_allocations is available on line items in carts, checkouts, orders, and draft orders."
        },
        "final_line_price": {
          "type": "number",
          "description": "Returns the combined price of all the items in the line item. This is equal to line_item.final_price times line_item.quantity."
        },
        "final_price": {
          "type": "number",
          "description": "Returns the price of the line item including all line level discount amounts."
        }
      }
    },
    "images": {
      "type": "object",
      "description": "Allows you to access any image in a store by its filename",
      "link": "https://help.shopify.com/themes/liquid/objects#images"
    },
    "linklists": {
      "description": "Returns a list of all the menus (link lists) in your store. You can use linklists to access your link lists with their handles.",
      "link": "https://help.shopify.com/themes/liquid/objects#linklists",
      "type": "array"
    },
    "product": {
      "type": "object",
      "description": "Product object",
      "properties": {
        "collections": {
          "description": "Returns an array of all of the collections that a product belongs to, except any collections that are not available on the sales channel being used."
        },
        "tags": {
          "description": "Returns an array of all of the product's tags. The tags are returned in alphabetical order."
        },
        "images": {
          "description": "Returns an array of the product's images. Use the img_url filter to link to the product image on Shopify's content delivery network (CDN)."
        },
        "options": {
          "description": "Returns an array of the product's option names."
        },
        "options_with_values": {
          "description": "Returns an array of the product's options."
        },
        "variants": {
          "description": "Returns an array of the product's variants."
        },
        "content": {
          "description": "Returns the description of the product. Alias for product.description."
        },
        "description": {
          "description": "Returns the description of the product."
        },
        "handle": {
          "description": "Returns the handle of a product."
        },
        "compare_at_price_max": {
          "description": "Returns the highest compare at price."
        },
        "price_max": {
          "description": "Returns the highest price of the product."
        },
        "id": {
          "description": "Returns the id of the product."
        },
        "compare_at_price_min": {
          "description": "Returns the lowest compare at price."
        },
        "price": {
          "description": "Returns the lowest price of all the product's variants. This attribute is the same as product.price_min."
        },
        "price_min": {
          "description": "Returns the lowest price of the product."
        },
        "template_suffix": {
          "description": "Returns the name of the custom product template assigned to the product, without the product. prefix nor the .liquid extension. Returns nil if a custom template is not assigned to the product."
        },
        "featured_image": {
          "description": "Returns the relative URL of the product's featured image."
        },
        "type": {
          "description": "Returns the relative URL of the product."
        },
        "title": {
          "description": "Returns the title of the product."
        },
        "selected_variant": {
          "description": "Returns the variant object of the currently-selected variant if there is a valid ?variant= parameter in the URL. Returns nil if there is not."
        },
        "selected_or_first_available_variant": {
          "description": "Returns the variant object of the currently-selected variant if there is a valid ?variant= query parameter in the URL. If there is no selected variant, the first available variant is returned. In order for a variant to be available, its variant.inventory_quantity must be greater than zero or variant.inventory_policy must be set to continue. A variant with no inventory_management is considered available."
        },
        "first_available_variant": {
          "description": "Returns the variant object of the first product variant that is available for purchase. In order for a variant to be available, its variant.inventory_quantity must be greater than zero or variant.inventory_policy must be set to continue. A variant with no inventory_policy is considered available."
        },
        "vendor": {
          "description": "Returns the vendor of the product."
        },
        "available": {
          "description": "Returns true if a product is available for purchase. Returns falseif all of the products variants' inventory_quantity values are zero or less, and their inventory_policy is not set to \"Allow users to purchase this item, even if it is no longer in stock.\""
        },
        "compare_at_price_varies": {
          "description": "Returns true if the compare_at_price_min is different from the compare_at_price_max. Returns false if they are the same."
        },
        "has_only_default_variant": {
          "description": "Returns true if the product only has the default variant. This lets you determine whether to show a variant picker in your product forms."
        },
        "price_varies": {
          "description": "Returns true if the product's variants have varying prices. Returns false if all of the product's variants have the same price."
        }
      },
      "link": "https://help.shopify.com/themes/liquid/objects#product"
    },
    "order": {
      "description": "You can access the order object in a theme's Liquid templates with \"customer.orders\"",
      "type": "object",
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/order",
      "properties": {
        "attributes": {
          "description": "Returns the custom cart attributes for the order, if there are any. You can add as many custom attributes to your cart as you like.\n\nWhen you're looping through attributes, use \"{{ attribute | first }}\" to get the name of the attribute, and \"{{ attribute | last }}\" to get its value.",
          "type": "array"
        },
        "billing_address": {
          "description": "Returns the billing address of the order.",
          "type": "string"
        },
        "cancelled": {
          "description": "Returns true if an order is canceled, or false if it is not.",
          "type": "string"
        },
        "cancelled_at": {
          "description": "Returns the timestamp of when an order was canceled. Use the date filter to format the timestamp.",
          "type": "string"
        },
        "cancel_reason": {
          "description": "Returns one of the following cancellation reasons, if an order was canceled:\n\n-items unavailable\n- fraudulent order\n- customer changed/cancelled order\n- other\n",
          "type": "string"
        },
        "cancel_reason_label": {
          "description": "Returns the translated output of an order's order.cancel_reason.",
          "type": "string"
        },
        "cart_level_discount_applications": {
          "description": "Returns an array of order-specific discount applications for an order.",
          "type": "array"
        },
        "created_at": {
          "description": "Returns the timestamp of when an order was created. Use the date filter to format the timestamp.",
          "type": "string"
        },
        "customer": {
          "description": "Returns the customer associated with the order.",
          "type": "string"
        },
        "customer_url": {
          "description": "Returns a unique URL that the customer can use to access the order.",
          "type": "string"
        },
        "discount_applications": {
          "description": "Returns an array of discount applications for an order.",
          "type": "string"
        },
        "email": {
          "description": "Returns the email address associated with an order, if it exists.",
          "type": "string"
        },
        "financial_status": {
          "description": "Returns the financial status of an order. The possible values are:\n\n- pending\n- authorized\n- paid\n- partially_paid\n- refunded\n- partially_refunded\n- voided",
          "type": "string"
        },
        "financial_status_label": {
          "description": "Returns the translated output of an order's \"financial_status\".",
          "type": "string"
        },
        "fulfillment_status": {
          "description": "Returns the fulfillment status of an order.",
          "type": "string"
        },
        "fulfillment_status_label": {
          "description": "Returns the translated output of an order's fulfillment_status.",
          "type": "string"
        },
        "line_items": {
          "description": "Returns an array of line items for the order.",
          "type": "array"
        },
        "line_items_subtotal_price": {
          "description": "Returns the sum of the order's line-item prices after any line item discounts have been applied. The subtotal amount doesn't include cart discounts, taxes (unless taxes are included in the prices), or shipping costs.",
          "type": "string"
        },
        "location": {
          "description": "(POS only) Returns the physical location of the order. You can configure locations in the Locations settings of your Shopify admin.",
          "type": "string"
        },
        "name": {
          "description": "Returns the name of the order in the format set in the Standards and formats section of the General settings of your Shopify admin.",
          "type": "string"
        },
        "note": {
          "description": "Returns the note associated with a customer order.",
          "type": "string"
        },
        "order_number": {
          "description": "Returns the integer representation of the order name.",
          "type": "integer"
        },
        "order_status_url": {
          "description": "Returns the unique URL for the order status page of the order.",
          "type": "string"
        },
        "phone": {
          "description": "Returns the phone number associated with an order, if it exists.",
          "type": "string"
        },
        "shipping_address": {
          "description": "Returns the shipping address of the order.",
          "type": "string"
        },
        "shipping_methods": {
          "description": "Returns an array of shipping_method variables from the order.",
          "type": "string"
        },
        "shipping_price": {
          "description": "Returns the shipping price of an order.",
          "type": "string"
        },
        "subtotal_price": {
          "description": "Returns the subtotal price of all the items in the order after both line-item and cart discounts have been applied. The subtotal doesn't include taxes (unless taxes are included in the prices) or shipping costs.",
          "type": "string"
        },
        "tags": {
          "description": "Returns an array of all of the order's tags. The tags are returned in alphabetical order.",
          "type": "array"
        },
        "tax_lines": {
          "description": "Returns an array of tax_line variables for an order.",
          "type": "string"
        },
        "tax_price": {
          "description": "Returns the order's tax price.",
          "type": "string"
        },
        "total_discounts": {
          "description": "Returns the total value of all discounts applied to the order.",
          "type": "string"
        },
        "total_net_amount": {
          "description": "Returns the net amount of the order.\n\nThe \"order.total_net_amount\" is calculated after refunds are applied. The value is equivalent to \"order.total_price minus\" \"order.total_refunded_amount\".",
          "type": "string"
        },
        "total_price": {
          "description": "Returns the total price of an order.\n\nThe \"order.total_price amount\" is calculated before refunds are applied. To get the value of refunds, use the \"order.total_refunded_amount property.\"",
          "type": "string"
        },
        "total_refunded_amount": {
          "description": "Returns the total refunded amount of an order.",
          "type": "string"
        },
        "transactions": {
          "description": "Returns an array of transactions from the order.",
          "type": "array"
        }
      }
    },
    "section": {
      "description": "The section object lets you access a section's properties and setting values.",
      "type": "object",
      "link": "https://shopify.dev/docs/themes/liquid/reference/objects/section",
      "properties": {
        "blocks": {
          "description": "Returns an array of the section's blocks.",
          "type": "array"
        },
        "id": {
          "description": "For static sections, returns the section's file name without \".liquid\". For dynamic sections, returns a dynamically generated ID.",
          "type": "integer"
        },
        "settings": {
          "description": "Returns an object of the section settings set in the theme editor. Retrieve setting values by referencing the setting's unique id.",
          "type": "object"
        }
      }
    }
  },
  "tags": {
    "echo": {
      "description": "Outputs an expression in the rendered HTML. This is identical to wrapping an expression in `{{` and `}}`, but works inside liquid tags. Filters are supported.",
      "link": "https://help.shopify.com/en/themes/liquid/tags/theme-tags#echo",
      "singular": true,
      "type": "variable"
    },
    "form": {
      "type": "output",
      "description": "Creates an HTML <form> element along with the required <input> elements to submit the form to a particular endpoint.",
      "link": "https://shopify.dev/docs/themes/liquid/reference/tags/theme-tags#form",
      "arguments": [
        {
          "name": "activate_customer_password",
          "description": "Generates a form for activating a customer account on the activate_account.liquid template."
        },
        {
          "description": "Generates a form for adding a product variant to the cart. Requires a \"product\" object as a parameter.",
          "name": "product"
        },
        {
          "description": "Generates a form for creating a new comment in the article.liquid template. Requires the article object as a parameter.",
          "name": "new_comment"
        },
        {
          "description": "Generates a form for creating a new customer account on the register.liquid template.",
          "name": "create_customer"
        },
        {
          "description": "Generates a form for creating a new customer without registering a new account. This form is useful for collecting customer information when you don't want customers to log in to your store, such as building a list of emails from a newsletter signup.",
          "name": "customer"
        },
        {
          "description": "Generates a form for creating or editing customer account addresses on the addresses.liquid template. When creating a new address, include the parameter customer.new_address. When editing an existing address, include the parameter address.",
          "name": "customer_address"
        },
        {
          "description": "Generates a form for logging into Customer Accounts on the login.liquid template.",
          "name": "customer_login"
        },
        {
          "description": "Generates a form for recovering a lost password on the login.liquid template.",
          "name": "recover_customer_password"
        },
        {
          "description": "Generates a form for submitting an email through the Liquid contact form.",
          "name": "contact"
        },
        {
          "description": "Generates a form on the customers/reset_password.liquid template for a customer to reset their password.",
          "name": "reset_customer_password"
        },
        {
          "description": "Generates a form on the login.liquid template that directs customers back to their checkout session as a guest instead of logging in to an account.",
          "name": "guest_logi n"
        },
        {
          "description": "Generates a form on the password.liquid template for entering a password-protected storefront.",
          "name": "storefront_password"
        },
        {
          "description": "Generates a form that lets your customer change the currency in your storefront.",
          "name": "currency"
        }
      ],
      "parameters": [
        {
          "name": "article",
          "description": "The `article` object",
          "accepts": "string"
        },
        {
          "name": "address",
          "description": "The `address` object is required when editing an existing address",
          "accepts": "string"
        },
        {
          "name": "customer.new_address",
          "description": "The `customer.new_address` is required for creating a new address",
          "accepts": "string"
        },
        {
          "name": "product",
          "description": "The `product` object is required when generating a form for adding a product variant to the cart",
          "accepts": "string"
        }
      ]
    },
    "include": {
      "description": "The include tag has been deprecated because the way that it handles variables reduces performance and makes theme code harder to both read and maintain.",
      "filters": false,
      "trims": false,
      "deprecated": true,
      "link": "https://help.shopify.com/en/themes/liquid/tags/deprecated-tags#include",
      "singular": true,
      "type": "import"
    },
    "layout": {
      "description": "Include \"{% layout 'alternate' %}\" at the beginning of a template file to use an alternate layout file from the Layout folder of your theme. If you don't define an alternate layout, the theme.liquid template file is used by default:",
      "singular": true,
      "type": "import",
      "link": "https://help.shopify.com/en/themes/liquid/tags/deprecated-tags#include"
    },
    "paginate": {
      "description": "Splitting products, blog articles, and search results across multiple pages is a necessary part of theme design as you are limited to 50 results per page in any for loop.",
      "link": "https://help.shopify.com/en/themes/liquid/tags/deprecated-tags#include",
      "type": "iteration"
    },
    "section": {
      "description": "Renders a section from the sections folder of a theme.",
      "filters": false,
      "link": "https://help.shopify.com/en/themes/development/sections#using-section-schema-tags",
      "singular": true,
      "type": "import"
    },
    "schema": {
      "description": "The javascript tag is used by Shopify sections. Each section can have a single schema tag, and schema tags must contain valid JSON. schema tags can be placed anywhere within a section file but cannot be nested inside another Liquid tag.  ",
      "filters": false,
      "language": "json",
      "link": "https://help.shopify.com/en/themes/development/sections#using-section-schema-tags",
      "type": "embedded",
      "trims": false
    },
    "style": {
      "type": "embedded",
      "description": "The Liquid style tag renders an HTML `<style>` tag with a Shopify data attribute.",
      "filters": false,
      "trims": false,
      "language": "css",
      "link": "https://help.shopify.com/themes/liquid/tags/theme-tags#style"
    },
    "stylesheet": {
      "type": "embedded",
      "description": "The stylesheet tag is used by Shopify sections. Code is concatenated into a single file by Shopify and injected into `{{ content_for_header }}`.",
      "filters": false,
      "trims": false,
      "deprecated": true,
      "language": "css",
      "link": "https://help.shopify.com/en/themes/development/sections#javascript-and-stylesheet-tags",
      "arguments": [
        {
          "name": "scss",
          "description": "SASS support is used by Shopify sections. Code is concatenated into a single file by Shopify and injected into `{{ content_for_header }}`."
        }
      ]
    },
    "javascript": {
      "type": "embedded",
      "description": "The javascript tag is used by Shopify sections. Code is concatenated into a single file by Shopify and injected into `{{ content_for_header }}`.",
      "filters": false,
      "deprecated": true,
      "trims": false,
      "language": "javascript",
      "link": "https://help.shopify.com/en/themes/development/sections#javascript-and-stylesheet-tags"
    }
  }
}
