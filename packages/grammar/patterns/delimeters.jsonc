{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Liquid",
  "scopeName": "source.liquid",
  "fileTypes": ["liquid"],
  "injections": {
    "L:string - (string.quoted.*.html)": {
      "patterns": [
        {
          "include": "#tags"
        },
        {
          "include": "#objects"
        }
      ]
    }
  },
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#tags"
    },
    {
      "include": "#objects"
    }
  ],
  "repository": {
    "comments": {
      "name": "comment.block.liquid",
      "begin": "{%-?\\s*comment\\s*-?%}",
      "end": "{%-?\\s*endcomment\\s*-?%}"
    },
    "tags": {
      "name": "punctuation.tag.liquid",
      "begin": "({%)(-)?",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.liquid"
        },
        "2": {
          "name": "keyword.other.whitespace.liquid"
        }
      },
      "end": "(-)?(%})",
      "endCaptures": {
        "1": {
          "name": "keyword.other.whitespace.liquid"
        },
        "2": {
          "name": "punctuation.definition.tag.end.liquid"
        }
      },
      "patterns": [
        {
          "include": "#constant-characters"
        },
        {
          "include": "#constant-boolean"
        },
        {
          "include": "#constant-numeric"
        },
        {
          "include": "#constant-boolean"
        },
        {
          "include": "#entity-name"
        },
        {
          "include": "#entity-other-attribute-name"
        },
        {
          "include": "#import-tag"
        },
        {
          "include": "#invalid-ampersand"
        },
        {
          "include": "#invalid-array"
        },
        {
          "include": "#invalid-conditions"
        },
        {
          "include": "#invalid-operators"
        },
        {
          "include": "#keyword-control"
        },
        {
          "include": "#keyword-operators"
        },
        {
          "include": "#keyword-operator-assignment"
        },
        {
          "include": "#string-quoted-double"
        },
        {
          "include": "#string-quoted-single"
        },
        {
          "include": "#support-class"
        },
        {
          "include": "#support-function"
        },
        {
          "include": "#support-variable"
        },
        {
          "include": "#support-constant"
        },
        {
          "include": "#variable-parameter"
        },
        {
          "include": "#variable-other"
        }
      ]
    },
    "objects": {
      "name": "punctuation.output.liquid",
      "begin": "({{)(-)?",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.liquid"
        },
        "2": {
          "name": "keyword.other.whitespace.liquid"
        }
      },
      "end": "(-)?(}})",
      "endCaptures": {
        "1": {
          "name": "keyword.other.whitespace.liquid"
        },
        "2": {
          "name": "punctuation.definition.tag.end.liquid"
        }
      },
      "patterns": [
        {
          "include": "#constant-characters"
        },
        {
          "include": "#object-properties"
        },
        {
          "include": "#string-quoted-double"
        },
        {
          "include": "#string-quoted-single"
        },
        {
          "include": "#support-class"
        },
        {
          "include": "#support-function"
        },
        {
          "include": "#support-variable"
        },
        {
          "include": "#filter-with-arguments"
        },
        {
          "include": "#filter-without-arguments"
        },
        {
          "include": "#var-support-variable"
        },
        {
          "include": "#variable-parameter"
        },
        {
          "include": "#variable-other"
        }
      ]
    },

    /* -------------------------------------------- */
    /*                TAGS > CONSTANT               */
    /* -------------------------------------------- */

    "constant-characters": {
      "name": "constant.character.entity.liquid",
      "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
      "captures": {
        "1": {
          "name": "punctuation.definition.entity.html"
        },
        "3": {
          "name": "punctuation.definition.entity.html"
        }
      }
    },
    "constant-boolean": {
      "name": "constant.language.liquid",
      "match": "(false|true|nil|null|empty|blank)"
    },
    "constant-numeric": {
      "name": "constant.numeric.liquid",
      "match": "(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?"
    },

    /* -------------------------------------------- */
    /*                TAGS > ENTITY                 */
    /* -------------------------------------------- */

    "entity-name": {
      "match": "(((?<={%)|(?<={%-))\\s*(\\w+))",
      "captures": {
        "1": {
          "name": "entity.name.tag.liquid"
        }
      }
    },

    /* -------------------------------------------- */
    /*                TAGS > KEYWORD                */
    /* -------------------------------------------- */

    "keyword-control": {
      "name": "keyword.control.liquid",
      "match": "(?<=\\s)(with|offset|limit)(\\:)?(?=\\s)",
      "captures": {
        "1": {
          "name": "keyword.control.liquid"
        },
        "2": {
          "name": "keyword.operator.assignment.augmented.liquid"
        }
      }
    },
    "keyword-control-conditional": {
      "name": "keyword.control.conditional.liquid"
    },
    "keyword-operators": {
      "name": "keyword.operator.liquid",
      "match": "\\s+(and|or|not|contains|in|by|((\\!|\\=|\\<|\\>)\\=))\\s+"
    },
    "keyword-operator-assignment": {
      "match": "/=",
      "name": "keyword.operator.assignment.augmented.liquid"
    },

    /* -------------------------------------------- */
    /*               OBJECTS > FILTER               */
    /* -------------------------------------------- */

    "filter-with-arguments": {
      "name": "support.function.with-args.liquid",
      "match": "(\\|\\s*)(?![\\.0-9])([a-zA-Z0-9_-]+)(\\:)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.pipe.liquid"
        },
        "2": {
          "name": "support.property.name.liquid"
        },
        "3": {
          "name": "keyword.operator.assignment.augmented.liquid"
        }
      }
    },
    "filter-without-arguments": {
      "name": "support.function.without-args.liquid",
      "match": "(\\|\\s*)(?![\\.0-9])([a-zA-Z0-9_-]+)\\s*",
      "captures": {
        "1": {
          "name": "punctuation.separator.pipe.liquid"
        },
        "2": {
          "name": "support.property.name.liquid"
        }
      }
    },

    /* -------------------------------------------- */
    /*                   VARIABLES                  */
    /* -------------------------------------------- */

    "variable-parameter": {
      "name": "variable.parameter.liquid",
      "match": "([a-zA-Z0-9_-]+)(\\:)\\s*([a-zA-Z0-9_-]+)",
      "captures": {
        "1": {
          "name": "support.property.name.liquid"
        },
        "2": {
          "name": "keyword.operator.assignment.augmented.liquid"
        }
      }
    },
    "variable-other": {
      "name": "variable.other.liquid",
      "match": "\\w+"
    },
    "var-support-variable": {
      "name": "support.variable.liquid",
      "match": "(?<=\\.)\\w+\\b"
    }
  }
}
