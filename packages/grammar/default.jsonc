{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Liquid",
  "scopeName": "source.liquid",
  "fileTypes": ["liquid"],
  "injections": {
    "L:string - (string.quoted.*.html)": {
      "patterns": [{ "include": "#tags" }, { "include": "#objects" }]
    }
  },
  "patterns": [
    { "include": "#comments" },
    { "include": "#tags" },
    { "include": "#objects" },
    { "include": "text.html.basic" }
  ],
  "repository": {
    "tags": {
      "name": "punctuation.output.liquid",
      "begin": "({%)(-)?",
      "beginCaptures": {
        "1": { "name": "punctuation.definition.tag.begin.liquid" },
        "2": { "name": "keyword.other.whitespace.liquid" }
      },
      "end": "(-)?(%})",
      "endCaptures": {
        "1": { "name": "keyword.other.whitespace.liquid" },
        "2": { "name": "punctuation.definition.tag.end.liquid" }
      },
      "patterns": [
        { "include": "#entity-name" },
        { "include": "#constant-characters" },
        { "include": "#constant-boolean" },
        { "include": "#constant-numeric" },
        { "include": "#import-tag" },
        { "include": "#import-parameters" },
        { "include": "#invalid-ampersand" },
        { "include": "#invalid-array" },
        { "include": "#invalid-conditions" },
        { "include": "#invalid-operators" },
        { "include": "#keyword-control" },
        { "include": "#keyword-operator" },
        { "include": "#keyword-operator-assignment" },
        { "include": "#string-quoted-double" },
        { "include": "#string-quoted-single" },
        { "include": "#support-class" },
        { "include": "#support-variable" },
        { "include": "#support-function-with-arguments" },
        { "include": "#support-function-without-arguments" },
        { "include": "#variable-parameter" },
        { "include": "#variable-other" }
      ]
    },

    "objects": {
      "name": "punctuation.output.liquid",
      "begin": "({{)(-)?",
      "beginCaptures": {
        "1": { "name": "punctuation.definition.tag.begin.liquid" },
        "2": { "name": "keyword.other.whitespace.liquid" }
      },
      "end": "(-)?(}})",
      "endCaptures": {
        "1": { "name": "keyword.other.whitespace.liquid" },
        "2": { "name": "punctuation.definition.tag.end.liquid" }
      },
      "patterns": [
        { "include": "#constant-characters" },
        { "include": "#constant-boolean" },
        { "include": "#constant-numeric" },
        { "include": "#keyword-control" },
        { "include": "#keyword-operator" },
        { "include": "#keyword-operator-assignment" },
        { "include": "#string-quoted-double" },
        { "include": "#string-quoted-single" },
        { "include": "#support-class" },
        { "include": "#support-variable" },
        { "include": "#support-function-with-arguments" },
        { "include": "#support-function-without-arguments" },
        { "include": "#variable-parameter" },
        { "include": "#variable-other" }
      ]
    },

    /* -------------------------------------------- */
    /*                    COMMENT                   */
    /* -------------------------------------------- */

    "comments": {
      "name": "comment.block.liquid",
      "begin": "{%-?\\s*comment\\s*-?%}",
      "end": "{%-?\\s*endcomment\\s*-?%}"
    },

    /* -------------------------------------------- */
    /*                   CONSTANT                   */
    /* -------------------------------------------- */

    "constant-boolean": {
      "name": "constant.language.liquid",
      "match": "(false|true|nil|null|empty|blank)"
    },
    "constant-characters": {
      "name": "constant.character.entity.liquid",
      "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)",
      "captures": {
        "1": { "name": "punctuation.definition.entity.html" },
        "3": { "name": "punctuation.definition.entity.html" }
      }
    },
    "constant-numeric": {
      "name": "constant.numeric.liquid",
      "match": "(-|\\+)?\\s*[0-9]+(\\.[0-9]+)?"
    },

    /* -------------------------------------------- */
    /*                    ENTITY                    */
    /* -------------------------------------------- */

    "entity-name": {
      "match": "(((?<={%)|(?<={%-))\\s*(\\w+))",
      "captures": {
        "1": { "name": "entity.name.tag.liquid" }
      }
    },

    /* -------------------------------------------- */
    /*                    IMPORT                    */
    /* -------------------------------------------- */

    "import-tag": {
      "name": "markup.underline.link.liquid",
      "match": "((?<=render)|(?<=include))\\s[^{,'\"]+?\\s+",
      "include": "#variable-parameter",
      "captures": {
        "0": { "name": "string.quoted.liquid" }
      }
    },
    "import-parameters": {
      "match": "([a-zA-Z0-9_-]+)(\\:)\\s*([a-zA-Z0-9_-]+?)",
      "captures": {
        "1": { "name": "variable.parameter.liquid" },
        "2": { "name": "keyword.operator.assignment.augmented.liquid" },
        "3": {
          "patterns": [
            { "include": "#constant-characters" },
            { "include": "#constant-boolean" },
            { "include": "#constant-numeric" }
          ]
        }
      }
    },

    /* -------------------------------------------- */
    /*                    INVALID                   */
    /* -------------------------------------------- */

    "invalid-ampersand": {
      "match": "&",
      "name": "invalid.illegal.bad-ampersand.liquid"
    },
    "invalid-array": {
      "match": "(\\[)(\\|)(?=[^\\]]*)(?=\\])",
      "captures": {
        "2": { "name": "invalid.illegal.filter.liquid" },
        "3": { "name": "invalid.illegal.filter.liquid" }
      }
    },
    "invalid-conditions": {
      "match": "(?=if|unless|elsif)\\s*[^%}]+\\s(in)\\s+",
      "captures": {
        "3": { "name": "invalid.illegal.operator.liquid" }
      }
    },
    "invalid-operators": {
      "name": "invalid.illegal.filter.liquid",
      "match": "(?<=\\s)(\\+|\\-|\\/|\\*)(?=\\s)"
    },

    /* -------------------------------------------- */
    /*                     KEYWORD                  */
    /* -------------------------------------------- */

    "keyword-operator": {
      "name": "keyword.operator.liquid",
      "match": "\\s+(and|or|not|contains|in|by|((\\!|\\=|\\<|\\>)\\=))\\s+"
    },
    "keyword-control": {
      "match": "(?<=\\s)(as|with|offset|limit|reverse|cols)(\\:)?",
      "captures": {
        "1": { "name": "keyword.control.liquid" },
        "2": { "name": "entity.other.liquid" }
      }
    },
    "keyword-operator-assignment": {
      "match": "\\=",
      "name": "keyword.operator.assignment.augmented.liquid"
    },
    "keyword-control-conditional": {
      "name": "keyword.control.conditional.liquid"
    },

    /* -------------------------------------------- */
    /*                    STRING                    */
    /* -------------------------------------------- */

    "string-quoted-single": {
      "name": "string.quoted.single.liquid",
      "begin": "'",
      "end": "'"
    },
    "string-quoted-double": {
      "name": "string.quoted.double.liquid",
      "begin": "\"",
      "end": "\""
    },

    /* -------------------------------------------- */
    /*                    SUPPORT                   */
    /* -------------------------------------------- */

    "support-class": {
      "name": "support.class.liquid",
      "match": "(?:(?<=[{%}>=!\\[\\]\\-|:])|(?<=\\s))(\\w+)(?=\\.)"
    },
    "support-function-with-arguments": {
      "name": "support.function.with-args.liquid",
      "match": "(\\|\\s*)(?![\\.0-9])([a-zA-Z0-9_-]+)(\\:)\\s*",
      "captures": {
        "1": { "name": "keyword.separator.pipe.liquid" },
        "2": { "name": "support.function.filter.liquid" },
        "3": { "name": "keyword.operator.assignment.augmented.liquid" }
      }
    },
    "support-function-without-arguments": {
      "name": "support.function.without-args.liquid",
      "match": "(\\|\\s*)(?![\\.0-9])([a-zA-Z0-9_-]+)\\s*",
      "captures": {
        "1": { "name": "keyword.separator.pipe.liquid" },
        "2": { "name": "support.function.filter.liquid" }
      }
    }
  }
}
