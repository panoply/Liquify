{
  "title": "JSON formatting schema for the VSCode Liquid extension",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "engine": {
      "type": "string",
      "oneOf": [
        {
          "enum": ["standard"],
          "description": "Liquid Standard"
        },
        {
          "enum": ["jekyll"],
          "description": "Liquid Jekyll"
        },
        {
          "enum": ["shopify"],
          "description": "Liquid Shopify"
        }
      ]
    },
    "specBasicTypes": {
      "type": "number",
      "description": "The valueof type of this object. This refers to what the object holds. This is used to validate whether the value can be iterated.\n\n Please note that the type property here is completely different from type property found in filter arguments.",
      "oneOf": [
        {
          "enum": ["object"],
          "type": "string",
          "description": "Representative of an object which has property values. When declaring an \"object\" type it is expect it has \"property\" references."
        },
        {
          "enum": ["number"],
          "type": "string",
          "description": "Representative of a number value, eg: 100"
        },
        {
          "enum": ["integer"],
          "type": "string",
          "description": "Representative of a boolean value, eg: \"true\" or \"false\""
        },
        {
          "enum": ["boolean"],
          "type": "string",
          "description": "Representative of a boolean value, eg: \"true\" or \"false\""
        },
        {
          "enum": ["variable"],
          "type": "string",
          "description": "Representative of constantant variable"
        },
        {
          "enum": ["string"],
          "type": "string",
          "description": "Representative of a string value."
        },
        {
          "enum": ["array"],
          "type": "string",
          "description": "Representative of an array value. Such a type is allowed to be iterated."
        }
      ]
    },
    "specObjectProperties": {
      "type": "array",
      "items": {
        "type": "object",
        "propertyNames": {
          "pattern": "name|description|type|properties"
        },
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the property the object provides."
          },
          "description": {
            "type": "string",
            "description": "The description of the property"
          },
          "type": {
            "$ref": "#/definitions/specBasicTypes"
          },
          "properties": {
            "if": {
              "properties": {
                "type": {
                  "const": "object"
                }
              }
            },
            "then": {
              "description": "The object properties",
              "$ref": "#/definitions/specObjectProperties"
            }
          }
        }
      }
    },
    "specObjects": {
      "type": "object",
      "description": "List of object specifications available to the defined engines variation",
      "additionalProperties": {
        "required": ["description", "type"],
        "properties": {
          "type": {
            "$ref": "#/definitions/specBasicTypes"
          },
          "deprecated": {
            "type": "boolean",
            "description": "Whether this object is deprecated of not, defaults to \"false\" and can be omitted unless otherwise required."
          },
          "description": {
            "description": "Description of this Object",
            "type": "string"
          },
          "filters": {
            "description": "Whether or not this object value can be use within filters. In some cases, object tags or variable based objects do not accept filters. Some objects in a Variation like Shopify hold \"constanant\" variable state, if an object is defined as such it unlikely it can be used or contain filters. All objects are assumed to be accept and be used within filters, so this field defaults to \"true\" and can be omitted unless otherwise required.",
            "type": "boolean",
            "default": false
          },
          "reference": {
            "description": "URL reference to online documentation explaining this object.",
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "url": {
                "type": "string",
                "pattern": "https\\:.*?"
              }
            }
          },
          "trims": {
            "description": "Whether or not this object value can use whitespace dash trim delimiters. Some objects in a Variation like Shopify hold \"constanant\" variable state, if an object is defined as such it unlikely filters are allowed.",
            "type": "boolean"
          },
          "global": {
            "description": "Whether or not this object is a global value. Global values are accessible from any template or file. All objects are assumed to no global scope, so this field defaults to \"false\" and can be omitted unless otherwise required.",
            "type": "boolean",
            "default": true
          },
          "const": {
            "description": "Whether or not this object is a content or constanant value. In some cases, object tags are variable based objects used to output content of templates files and in the Shopify Variation this includes scripts and stylesheets. Some objects in a variations like Shopify hold a \"constanant\" variable state. If an object is defined as such then its unlikely filters or trims are allowed and thus when a object has a const \"true\" value assigned, then both \"trim\" and \"filters\" are assumed to \"false\" and if otherwise not, you will need to explicity set them to \"true\" when this field is true.\n\nand All objects are assumed to not be a \"const\" values, so this field defaults to \"false\" and can be omitted unless otherwise required.",
            "type": "boolean",
            "default": false
          },
          "scope": {
            "description": "Some objects are accessible within tag based scope. For example, the \"{{ form }}\" object available in the Shopify Liquid variation is a scope based tag and must be used within a \"{% form %}\" tag. When an object is scope based include the name of tag scope in this field.",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "\\b[a-zA-Z_-]+"
            }
          },
          "properties": {
            "$ref": "#/definitions/object_properties",
            "description": "List of properties pertaining to the object. When the property the property asserts a type \"object\" you will nest its properties in a recursive manner.",
            "default": [{}]
          }
        }
      }
    },
    "validateHTML": {
      "type": "object",
      "properties": {
        "tag_pairs": {
          "type": "boolean",
          "default": true,
          "description": "Validates the start and end tag existence of HTML pairs",
          "markdownDescription": "Validates the start and end tag existence of HTML pairs.\n\nFor example:\n\n\t<main>\n\t\t<div>\n\t</main>\n\n Where the `<div>` tag is missing its closing (end) tag."
        },
        "tag_name": {
          "type": "string",
          "default": "strict",
          "description": "Validates HTML tag names",
          "oneOf": [
            {
              "enum": ["strict"],
              "description": "Enforces correct tag names are used, only tags that are valid within the official HTML specification are valid or defined custom data tags.",
              "markdownEnumDescriptions": [
                "Enforces correct tag names are used, only tags that are valid within the official HTML specification are valid or defined custom data tags.\n\nFor example:\n\n\t<divv></div>\n\n Where the `divv` tag name is invalid."
              ]
            },
            {
              "enum": ["off"],
              "description": "Disabled validation of HTML tag names",
              "markdownEnumDescriptions": [
                "Disabled validation of HTML tag names.\n\nFor example:\n\n\t<divv></div>\n\n Where the `divv` tag is perfectly fine."
              ]
            }
          ]
        },
        "syntactics": {
          "type": "boolean",
          "default": true,
          "description": "Validates the hierarchical placements of tags, ie: li tags must be contained in ul tags",
          "markdownDescription": "Validates the hierarchical placements of tags, ie: `li` tags must be contained in `ul` tags.\n\nFor example:\n\n\t<li>\n\t\t<ul></ul>\n\t</li>\n\n Where the `<ul></ul>` is incorrectly placed."
        },
        "quotes": {
          "type": "string",
          "default": "double",
          "description": "Validates the type of quotation characters used for tag values",
          "oneOf": [
            {
              "enum": ["double"],
              "description": "Enforces double quotation characters (reccomended)",
              "markdownEnumDescriptions": [
                "Enforces double quotation characters (reccomended).\n\nFor example:\n\n\t<div id=\"foo\">\n\n---\n\n**NOTE:**\n\nThe vast majoirty of HTML markup attribute values use double quotes, so don't be a hero. Leave this option set to `double` for sake of the majority."
              ]
            },
            {
              "enum": ["single"],
              "description": "Enforced single quotation characters (not-reccomended)",
              "markdownEnumDescriptions": [
                "Enforced single quotation characters (not-reccomended).\n\nFor example:\n\n\t<div id='foo'>\n\n---\n\n**NOTE:**\n\nDon't do this. Do you want to get bullied? Using single quotations for HTML attribute values is how you get bullied."
              ]
            },
            {
              "enum": ["off"],
              "description": "Disables this validation"
            }
          ]
        },
        "attributes": {
          "type": "boolean",
          "default": true,
          "description": "Validates the attributes used on tags",
          "markdownDescription": "Validates the attributes used on tags.\n\nFor example:\n\n\t<main type=\"text\">\n</main>\n\n Where the `type` is a valid attribute but only on certain tags (like the `<input>` tag) and has no business being used on a semantic `<main>` tag."
        },
        "values": {
          "type": "boolean",
          "default": true,
          "description": "Validates the values of tag attributes",
          "markdownDescription": "Validates the values of tag attributes.\n\nFor example:\n\n\t<input type=\"foo\">\n Where the `type` attribute does not accept a value equal to `foo` and only accepts certain values, like `text` or `checkbox` etc etc."
        },
        "liquid": {
          "description": "Liquid specific validations when Liquid syntax is being used within HTML tags between open (<) and close (>) delimiter values.",
          "markdownDescription": "Liquid specific validations when Liquid syntax is being used within HTML tags between open `<` and close `>` delimiter values.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "output_attributes": {
              "type": "boolean",
              "default": true,
              "description": "Allows Liquid output tags to be used in HTML tag attributes.",
              "markdownDescription": "Allows Liquid output tags to be used in HTML tag attributes.\n\nFor example:\n\n\t<div class=\"foo\" {{ some_value }}>"
            },
            "output_values": {
              "type": "boolean",
              "default": true,
              "description": "Allows Liquid output tags to be used in HTML tag attribute values (within quotations).",
              "markdownDescription": "Allows Liquid output tags to be used in HTML tag attribute values (within quotations).\n\nFor example:\n\n\t<div id=\"{{ foo }}\" class=\"{{ value }}\">"
            },
            "control_values": {
              "type": "boolean",
              "default": true,
              "description": "Allows Liquid control type tags to be used in HTML tag attribute values (within quotations).",
              "markdownDescription": "Allows Liquid output tags to be used in HTML tag attribute values (within quotations).\n\nFor example:\n\n\t<div class=\"foo {% if x %}bar{% endif %}\">"
            },
            "control_attributes": {
              "type": "boolean",
              "default": true,
              "description": "Allows Liquid control type tags to be used in HTML tag attributes.",
              "markdownDescription": "Allows Liquid control type tags to be used in HTML tag attributes.\n\nFor example:\n\n\t<div {% if true %} class=\"x\" {% endif %}>"
            },
            "iteration_attributes": {
              "type": "boolean",
              "default": false,
              "description": "Allows Liquid iteration type tags to be used in HTML tag attributes (not reccomended).",
              "markdownDescription": "Allows Liquid iteration type tags to be used in HTML tag attributes (not reccomended).\n\nFor example:\n\n\t<div {% for i in items %} data-{{ i }}=\"foo\" {% endfor %}>\n\n---\n\n**NOTE:**\n\nLeave this options set to `false` and avoid infusing for loops within HTML tag attributes. It's dangerous, un-predicatable and can lead to hard to maintain code.\n\n\"_But... Shopify said it was ok..._\"\n\nWell Shopify is wrong and the vast majority of that engineering team are plebs."
            },
            "iteration_values": {
              "type": "boolean",
              "default": false,
              "description": "Allows Liquid iteration type tags to be used in HTML tag values (not reccomended).",
              "markdownDescription": "Allows Liquid iteration type tags to be used in HTML tag attributes values between quotes (not reccomended).\n\nFor example:\n\n\t<div class={% for i in items %}{{ i }}{% endfor %}\">\n\n---\n\n**NOTE:**\n\nLeave this options set to `false` and avoid infusing for loops within HTML tag attributes values. It's dangerous, un-predicatable and can lead to hard to maintain code.\n\n\"_But... Shopify said it was ok..._\"\n\nWell Shopify is wrong and the vast majority of that engineering team are plebs."
            }
          }
        }
      }
    },
    "validateTag": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pair": {
          "type": "boolean",
          "default": true,
          "title": "Tag Pairs",
          "description": "Validates the start and end tag existence of Liquid pairs"
        },
        "placement": {
          "type": "boolean",
          "default": true,
          "title": "Tag Placement",
          "description": "Validates the placement position of tags that should be nested"
        },
        "whitespace": {
          "type": "boolean",
          "default": true,
          "title": "Tag Whitespace",
          "description": "Validates if the tag accepts whitespace dash `-` attribute values"
        },
        "newline": {
          "type": "boolean",
          "default": true,
          "title": "Tag Newline",
          "description": "Validates if a tag can span multiple lines or just a single line"
        }
      }
    },
    "validateControl": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "condition": {
          "type": "boolean",
          "default": true,
          "title": "Control Condition",
          "description": "Validates condition values used on control flow type tags, verifies their validity and if they can be used or not"
        },
        "operator": {
          "type": "boolean",
          "default": true,
          "title": "Control Operator",
          "description": "Validates the conditional operator values, in control tags"
        }
      }
    },
    "validateIteration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "operator": {
          "type": "boolean",
          "default": true,
          "title": "Iteration Operator",
          "description": "Validates the iteration tag type operator value"
        },
        "paramter": {
          "type": "boolean",
          "default": false,
          "title": "Iteration Parameter",
          "description": "Validates iteration parameter values."
        },
        "iteree": {
          "type": "boolean",
          "default": false,
          "title": "Iteration Iteree",
          "description": "Validates iteration iteree value, check to see if its an existing value"
        }
      }
    },
    "validateObject": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "boolean",
          "default": true,
          "title": "Object Name",
          "description": "Validates object tag name values"
        },
        "property": {
          "type": "boolean",
          "default": false,
          "title": "Object Property",
          "description": "Validates object propery existense and value"
        }
      }
    },
    "validateFilter": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "existence": {
          "type": "boolean",
          "default": true,
          "title": "Filter Existence",
          "description": "Validates the existence of a tag filter/s"
        },
        "parameter": {
          "type": "boolean",
          "default": false,
          "title": "Object Property",
          "description": "Validates filter parameters. For example, \"{{ tag | replace }}\" would be invalid as \"replace\" requires parameters."
        }
      }
    },
    "files": {
      "type": "array",
      "uniqueItems": true,
      "description": "List of file extension to apply formatting rules. Helpful when you want the formatter to handle \".js.liquid\" or \".scss.liquid\" files"
    },
    "tags": {
      "type": "array",
      "description": "Format options or rules applied to a custom set of defined tags",
      "items": {
        "type": "object",
        "required": ["type", "tag"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "oneOf": [
              {
                "enum": ["liquid"],
                "description": "This option will query select all Liquid tags according to the defined \"tag\" name"
              },
              {
                "enum": ["html"],
                "description": "This option will query select all HTML tags by according to the defined \"tag\" name"
              }
            ]
          },
          "tag": {
            "pattern": "[^<>{}\\/\\%]",
            "type": "string",
            "title": "Tag name",
            "description": "The name of the HTML or Liquid tag. Do not include delimeters or use expression syntax, accepts only a string value"
          },
          "attr": {
            "type": "string",
            "title": "Tag attribute",
            "description": "Define the tag by its attribute value. The extension will query select the defined tag and matching attribute property or value"
          },
          "ignore": {
            "type": "boolean",
            "title": "Ignore Tag",
            "default": false,
            "description": "Should this tag be skipped and ignored from formatting."
          }
        }
      }
    },
    "liquid": {
      "properties": {
        "dash_trim": {
          "type": "string",
          "default": "off",
          "title": "Sort Attributes",
          "oneOf": [
            {
              "enum": ["never"],
              "description": "Whitespace dashes will never be applied to tags"
            },
            {
              "enum": ["always"],
              "description": "Whitespace dashes will always be applied to tags. Please note that any tags contained within strings are skipped."
            },
            {
              "enum": ["off"],
              "description": "Whitespace dashes will be ignored and left up to the developer to apply or not."
            }
          ]
        },
        "force_line": {
          "type": "boolean",
          "default": false,
          "title": "Force Newline",
          "description": "Forces newline padding between start and end tag blocks"
        },
        "quote_convert": {
          "default": "none",
          "title": "Convert Quotes",
          "description": "If the quotes of strings should be converted to single quotes or double quotes",
          "oneOf": [
            {
              "enum": ["double"],
              "description": "Converts single quotes to double quotes"
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            },
            {
              "enum": ["single"],
              "description": "Converts double quotes to single quotes"
            }
          ]
        },
        "force_filter": {
          "type": "boolean",
          "title": "Force Filter",
          "description": "If tag filters should be indented each onto their own line if the exceed wrap limit. Please note tags using filters that are contained within strings are skipped"
        }
      }
    },
    "markup": {
      "properties": {
        "attribute_sort": {
          "type": "boolean",
          "default": false,
          "title": "Sort Attributes",
          "description": "Alphanumerically sort document attributes. Attribute sorting is ignored on tags that contain attributes template attributes"
        },
        "attribute_sort_list": {
          "type": "string",
          "title": "Sort Attribute List",
          "description": "A comma separated list of attribute names. Attributes will be sorted according to this list and then alphanumerically. This option requires \"attribute_sort\" have a value of true"
        },
        "correct": {
          "type": "boolean",
          "default": false,
          "title": "Fix Sloppy Code",
          "description": "Automatically correct some sloppiness in code"
        },
        "comments": {
          "type": "boolean",
          "default": false,
          "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code"
        },
        "force_attribute": {
          "type": "boolean",
          "default": false,
          "title": "Force Indentation of All Attributes",
          "description": "If all document attributes should be indented each onto their own line"
        },
        "format_comments": {
          "type": "string",
          "default": false,
          "description": "Control how Liquid comment are formatted"
        },
        "preserve": {
          "type": "number",
          "default": 1,
          "title": "Preserve Consecutive New Lines",
          "description": "The maximum number of consecutive empty lines to retain"
        },
        "preserve_comment": {
          "type": "boolean",
          "default": false,
          "title": "Eliminate Word Wrap Upon Comments",
          "description": "Prevent comment reformatting due to option wrap"
        },
        "preserve_text": {
          "type": "boolean",
          "default": true,
          "title": "Preserve Markup Text White Space",
          "description": "If text in the provided document code should be preserved exactly as provided. This option eliminates beautification and wrapping of text content"
        },
        "wrap": {
          "type": "number",
          "title": "Wrap Limit",
          "description": "Character width limit before applying word wrap. A 0 value disables this option. Defaults to the word wrap limit set workspace or user settings."
        },
        "space_close": {
          "type": "boolean",
          "default": false,
          "title": "Close Markup Self-Closing Tags with a Space",
          "description": "Markup self-closing tags end will end with ' />' instead of '/>'"
        },
        "tag_whitespace": {
          "type": "string",
          "description": "Automatically apply whitespace dashes (-) to the encasing Liquid brace tags, eg: {{- -}} or {%- -%}. Please note that tags nested within HTML Attributes will not have whitespaces applied.",
          "oneOf": [
            {
              "enum": ["off"],
              "description": "Disables this rule"
            },
            {
              "enum": ["never"],
              "description": "Never applies whitespace dashes to Liquid tags, eg: \"{% tag %}\""
            },
            {
              "enum": ["always"],
              "description": "Will always apply whitespace dashes to Liquid tags, eg: \"{%- tag -%}\""
            }
          ]
        },
        "tag_padding": {
          "type": "boolean",
          "default": false,
          "description": "Apply and newline before and after content contained with tag blocks. This option is only applied to Tag Associates and Overrides"
        },
        "quote_convert": {
          "default": "none",
          "title": "Convert Quotes",
          "description": "If the quotes of script strings or document attributes should be converted to single quotes or double quotes",
          "oneOf": [
            {
              "enum": ["double"],
              "description": "Converts single quotes to double quotes"
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            },
            {
              "enum": ["single"],
              "description": "Converts double quotes to single quotes"
            }
          ]
        },
        "files": {
          "$ref": "#/definitions/files",
          "items": [
            {
              "type": "string",
              "enum": [".html"]
            }
          ]
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "style": {
      "properties": {
        "braces": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "comments": {
          "type": "boolean",
          "default": false,
          "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code"
        },
        "compressed_css": {
          "type": "boolean",
          "default": false,
          "title": "Compressed CSS",
          "description": "If CSS should be beautified in a style where the properties and values are minifed for faster reading of selectors."
        },
        "css_insert_lines": {
          "type": "boolean",
          "default": false,
          "title": "Insert Empty Lines",
          "description": "Inserts new line characters between every CSS code block."
        },
        "no_lead_zero": {
          "type": "boolean",
          "default": false,
          "title": "Leading 0s",
          "description": "Whether leading 0s in CSS values immediately preceding a decimal should be removed or prevented."
        },
        "preserve": {
          "type": "number",
          "default": 1,
          "title": "Preserve Consecutive New Lines",
          "description": "The maximum number of consecutive empty lines to retain"
        },
        "selector_list": {
          "type": "boolean",
          "default": false,
          "title": "Single Lined Selectors",
          "description": "If comma separated CSS selectors should present on a single line of code."
        },
        "files": {
          "$ref": "#/definitions/files",
          "items": [
            {
              "type": "string",
              "enum": [".css.liquid", ".css"]
            }
          ]
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "script": {
      "properties": {
        "braces": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "brace_line": {
          "type": "boolean",
          "default": false,
          "title": "Brace Lines",
          "description": "If true an empty line will be inserted after opening curly braces and before closing curly braces"
        },
        "brace_padding": {
          "type": "boolean",
          "default": false,
          "title": "Brace Padding",
          "description": "Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings"
        },
        "brace_style": {
          "type": "string",
          "default": "none",
          "title": "Brace Style",
          "description": "Emulates JSBeautify's brace_style option",
          "oneOf": [
            {
              "enum": ["collapse"],
              "description": "Sets options.format_object to 'indent' and options.neverflatten to true"
            },
            {
              "enum": ["collapse-preserve-inline"],
              "description": "Sets options.bracepadding to true and options.format_object to 'inline'"
            },
            {
              "enum": ["expand"],
              "description": "Sets options.braces to true, options.format_object to 'indent', and options.never flatten to true."
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            }
          ]
        },
        "case_space": {
          "type": "boolean",
          "default": false,
          "title": "Space Following Case",
          "description": "If the colon separating a case's expression (of a switch/case block) from its statement should be followed by a space instead of indentation, thereby keeping the case on a single line of code"
        },
        "comments": {
          "type": "boolean",
          "default": false,
          "title": "Comment Indentation",
          "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code"
        },
        "else_line": {
          "type": "boolean",
          "default": false,
          "title": "Else On New Line",
          "description": "If else_line is true then the keyword 'else' is forced onto a new line."
        },
        "end_comma": {
          "type": "string",
          "default": "none",
          "title": "Trailing Comma",
          "description": "If there should be a trailing comma in arrays and objects",
          "oneOf": [
            {
              "enum": ["always"],
              "description": "Always ensure there is a tailing comma"
            },
            {
              "enum": ["never"],
              "description": "Remove trailing commas"
            },
            {
              "enum": ["none"],
              "description": "Ignore this option"
            }
          ]
        },
        "format_array": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all array indexes should be indented, never indented, or left to the default.",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each index of an array"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all array indexes appear on a single line"
            }
          ]
        },
        "format_object": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all object keys should be indented, never indented, or left to the default",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each key/value pair"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all key/value pairs appear on the same single line"
            }
          ]
        },
        "function_name": {
          "type": "boolean",
          "default": false,
          "title": "Space After Function Name",
          "description": "If a space should follow a JavaScript function name"
        },
        "method_chain": {
          "type": "number",
          "default": 3,
          "title": "Method Chains",
          "description": "When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken"
        },
        "never_flatten": {
          "type": "boolean",
          "default": false,
          "title": "Never Flatten Destructured Lists",
          "description": "If destructured lists in script should never be flattend"
        },
        "no_case_indent": {
          "type": "boolean",
          "default": false,
          "title": "Case Indentation",
          "description": "If a case statement should receive the same indentation as the containing switch block."
        },
        "no_semicolon": {
          "type": "boolean",
          "default": false,
          "title": "No Semicolons",
          "description": "Removes semicolons that would be inserted by ASI. This option is in conflict with option 'correct' and takes precedence over conflicting features. Use of this option is a possible security/stability risk"
        },
        "preserve": {
          "type": "number",
          "default": 1,
          "title": "Preserve Consecutive New Lines",
          "description": "The maximum number of consecutive empty lines to retain"
        },
        "preserve_comment": {
          "type": "boolean",
          "default": false,
          "title": "Eliminate Word Wrap Upon Comments",
          "description": "Prevent comment reformatting due to option wrap"
        },
        "quote_convert": {
          "default": "none",
          "title": "Convert Quotes",
          "description": "If the quotes of script strings or document attributes should be converted to single quotes or double quotes",
          "oneOf": [
            {
              "enum": ["double"],
              "description": "Converts single quotes to double quotes"
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            },
            {
              "enum": ["single"],
              "description": "Converts double quotes to single quotes"
            }
          ]
        },
        "space": {
          "type": "boolean",
          "default": false,
          "title": "Function Space",
          "description": "Inserts a space following the function keyword for anonymous functions"
        },
        "styleguide": {
          "type": "string",
          "default": "none",
          "title": "Script Styleguide",
          "description": "Provides a collection of option presets to easily conform to popular JavaScript style guides.",
          "oneOf": [
            {
              "enum": ["none"]
            },
            {
              "enum": ["airbnb"]
            },
            {
              "enum": ["crockford"]
            },
            {
              "enum": ["google"]
            },
            {
              "enum": ["jquery"]
            },
            {
              "enum": ["mediawiki"]
            },
            {
              "enum": ["semistandard"]
            },
            {
              "enum": ["standard"]
            },
            {
              "enum": ["yandex"]
            }
          ]
        },

        "ternary_line": {
          "type": "boolean",
          "default": false,
          "title": "Keep Ternary Statements On One Line",
          "description": "If ternary operators in JavaScript ? and : should remain on the same line"
        },
        "variable_list": {
          "type": "boolean",
          "default": false,
          "title": "Variable Declaration Lists",
          "description": "If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated"
        },
        "files": {
          "$ref": "#/definitions/files",
          "items": [
            {
              "type": "string",
              "enum": [".js.liquid", ".js", ".ts.liquid", ".ts"]
            }
          ]
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "json": {
      "properties": {
        "braces": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "brace_line": {
          "type": "boolean",
          "default": false,
          "title": "Brace Lines",
          "description": "If true an empty line will be inserted after opening curly braces and before closing curly braces"
        },
        "brace_style": {
          "type": "string",
          "default": "none",
          "title": "Brace Style",
          "description": "Emulates JSBeautify's brace_style option",
          "oneOf": [
            {
              "enum": ["collapse"],
              "description": "Sets options.format_object to 'indent' and options.neverflatten to true"
            },
            {
              "enum": ["collapse-preserve-inline"],
              "description": "Sets options.bracepadding to true and options.format_object to 'inline'"
            },
            {
              "enum": ["expand"],
              "description": "Sets options.braces to true, options.format_object to 'indent', and options.never flatten to true."
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            }
          ]
        },
        "format_array": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all array indexes should be indented, never indented, or left to the default.",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each index of an array"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all array indexes appear on a single line"
            }
          ]
        },
        "format_object": {
          "type": "string",
          "default": "default",
          "title": "Formatting Objects",
          "description": "Determines if all object keys should be indented, never indented, or left to the default",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each key/value pair"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all key/value pairs appear on the same single line"
            }
          ]
        },
        "preserve": {
          "type": "number",
          "default": 1,
          "title": "Preserve Consecutive New Lines",
          "description": "The maximum number of consecutive empty lines to retain"
        },
        "files": {
          "$ref": "#/definitions/files",
          "items": [
            {
              "type": "string",
              "enum": [".json.liquid", ".json", ".liquidrc"]
            }
          ]
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "ignore": {
      "items": [
        {
          "type": "string",
          "description": "Glob pattern to files and/or directories to be ignored by the formatter"
        }
      ]
    },
    "specsHtml": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "tags": {
          "type": "object",
          "title": "Tags",
          "description": "Custom HTML tags",
          "properties": {}
        },
        "attributes": {
          "type": "object",
          "title": "Attributes",
          "description": "Custom HTML Attributes"
        },
        "values": {
          "type": "object",
          "title": "Values",
          "description": "Custom HTML Attribute values"
        }
      }
    },
    "specsLiquid": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "tags": {
          "type": "object",
          "title": "Tags",
          "description": "Custom Liquid tags",
          "properties": {}
        },
        "filters": {
          "type": "object",
          "title": "Filters",
          "description": "Custom Liquid filters",
          "properties": {}
        },
        "objects": {
          "$ref": "#/definitions/specObjects"
        }
      }
    }
  },
  "required": ["engine"],
  "properties": {
    "engine": {
      "title": "Liquid Engine",
      "description": "The Liquid variation this project is using. Defaults to \"Standard\" and defines the type of completion references and hover descriptions intellisense uses.",
      "$ref": "#/definitions/engine"
    },
    "validate": {
      "type": "object",
      "title": "Validations",
      "description": "Diagnostic/Linting validation to execute on Liquid syntax.",
      "properties": {
        "html": {
          "type": "object",
          "additionalProperties": false,
          "description": "HTML validations",
          "$ref": "#/definitions/validateHTML"
        },
        "tag": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid tag validations",
          "$ref": "#/definitions/validateTag"
        },
        "iteration": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid iteration validations",
          "$ref": "#/definitions/validateIteration"
        },
        "control": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid control flow validations",
          "$ref": "#/definitions/validateControl"
        },
        "object": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid object validations",
          "$ref": "#/definitions/validateObject"
        },
        "filter": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid filter validations",
          "$ref": "#/definitions/validateFilter"
        }
      }
    },
    "format": {
      "type": "object",
      "title": "Formatting",
      "description": "Formatting beautification rules and options to be applied to files and tags. Define on a per-language basis.",
      "properties": {
        "ignore": {
          "type": "array",
          "title": "Ignore Files",
          "uniqueItems": true,
          "description": "List of files/directories to be ignored from formatting",
          "$ref": "#/definitions/ignore"
        },
        "liquid": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid beautification formatting options and rules",
          "$ref": "#/definitions/liquid"
        },
        "html": {
          "type": "object",
          "additionalProperties": false,
          "description": "HTML beautification formatting options and rules",
          "$ref": "#/definitions/markup"
        },
        "javascript": {
          "type": "object",
          "additionalProperties": false,
          "description": "JavaScript beautification formatting options and rules. Applied to any defined files, HTML <script> tags and Liquid \"javascript\" tags",
          "$ref": "#/definitions/script"
        },
        "css": {
          "type": "object",
          "additionalProperties": false,
          "description": "CSS beautification formatting options and rules. Applied to defined \"files[]\", HTML <style> tags and Liquid \"stylesheet\" / \"style\" tags",
          "$ref": "#/definitions/style"
        },
        "scss": {
          "type": "object",
          "additionalProperties": false,
          "description": "SCSS/SASS/LESS beautification formatting options and rules. Applied to defined \"files[]\" and Liquid \"stylesheet 'scss'\" tags",
          "$ref": "#/definitions/style"
        },
        "json": {
          "type": "object",
          "additionalProperties": false,
          "description": "JSON beautification formattingoptions and rules. Applied to any defined files, HTML <script type=\"application/json\"> tags and Liquid \"schema\" tags",
          "$ref": "#/definitions/json"
        }
      }
    },
    "specs": {
      "type": "object",
      "title": "Specifications",
      "description": "Extends the specification data references so the parser can understand custom tags and the Language Server can provide features to the tags.",
      "properties": {
        "html": {
          "type": "object",
          "additionalProperties": false,
          "description": "Custom set of HTML tags, attributes or values. Liquify understands and adopts an almost indentical schema to vscode-custom-data and will merge \"html.customData\" contributes located in worskpace settings.",
          "$ref": "#/definitions/specsHtml"
        },
        "liquid": {
          "type": "object",
          "additionalProperties": false,
          "description": "Custom set of Liquid tags, objects or filters. Extends the liquid specifications. Refer to the Liquid Specifications documentation to learn more about the specs and how to extends them.",
          "$ref": "#/definitions/specsLiquid"
        }
      }
    }
  }
}
