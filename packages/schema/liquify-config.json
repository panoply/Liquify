{
  "title": "JSON formatting schema for the VSCode Liquid extension",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "engine": {
      "type": "string",
      "oneOf": [
        {
          "enum": ["standard"],
          "description": "This option will query select all HTML tags by according to the defined \"tag\" name"
        },
        {
          "enum": ["jekyll"],
          "description": "This option will query select all HTML tags by according to the defined \"tag\" name"
        },
        {
          "enum": ["shopify"],
          "description": "This option will query select all HTML tags by according to the defined \"tag\" name"
        }
      ]
    },
    "validateTag": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pair": {
          "type": "boolean",
          "default": true,
          "title": "Tag Pairs",
          "description": "Validates the start and end tag existence of Liquid pairs"
        },
        "placement": {
          "type": "boolean",
          "default": true,
          "title": "Tag Placement",
          "description": "Validates the placement position of tags that should be nested"
        },
        "whitespace": {
          "type": "boolean",
          "default": true,
          "title": "Tag Whitespace",
          "description": "Validates if the tag accepts whitespace dash `-` attribute values"
        },
        "newline": {
          "type": "boolean",
          "default": true,
          "title": "Tag Newline",
          "description": "Validates if a tag can span multiple lines or just a single line"
        }
      }
    },
    "validateControl": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "condition": {
          "type": "boolean",
          "default": true,
          "title": "Control Condition",
          "description": "Validates condition values used on control flow type tags, verifies their validity and if they can be used or not"
        },
        "operator": {
          "type": "boolean",
          "default": true,
          "title": "Control Operator",
          "description": "Validates the conditional operator values, in control tags"
        }
      }
    },
    "validateIteration": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "operator": {
          "type": "boolean",
          "default": true,
          "title": "Iteration Operator",
          "description": "Validates the iteration tag type operator value"
        },
        "paramter": {
          "type": "boolean",
          "default": false,
          "title": "Iteration Parameter",
          "description": "Validates iteration parameter values."
        },
        "iteree": {
          "type": "boolean",
          "default": false,
          "title": "Iteration Iteree",
          "description": "Validates iteration iteree value, check to see if its an existing value"
        }
      }
    },
    "validateObject": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "boolean",
          "default": true,
          "title": "Object Name",
          "description": "Validates object tag name values"
        },
        "property": {
          "type": "boolean",
          "default": false,
          "title": "Object Property",
          "description": "Validates object propery existense and value"
        }
      }
    },
    "validateFilter": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "existence": {
          "type": "boolean",
          "default": true,
          "title": "Filter Existence",
          "description": "Validates the existence of a tag filter/s"
        },
        "parameter": {
          "type": "boolean",
          "default": false,
          "title": "Object Property",
          "description": "Validates filter parameters. For example, \"{{ tag | replace }}\" would be invalid as \"replace\" requires parameters."
        }
      }
    },
    "files": {
      "type": "array",
      "uniqueItems": true,
      "description": "List of file extension to apply formatting rules. Helpful when you want the formatter to handle \".js.liquid\" or \".scss.liquid\" files"
    },
    "tags": {
      "type": "array",
      "description": "Format options or rules applied to a custom set of defined tags",
      "items": {
        "type": "object",
        "required": ["type", "tag"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "oneOf": [
              {
                "enum": ["liquid"],
                "description": "This option will query select all Liquid tags according to the defined \"tag\" name"
              },
              {
                "enum": ["html"],
                "description": "This option will query select all HTML tags by according to the defined \"tag\" name"
              }
            ]
          },
          "tag": {
            "pattern": "[^<>{}\\/\\%]",
            "type": "string",
            "title": "Tag name",
            "description": "The name of the HTML or Liquid tag. Do not include delimeters or use expression syntax, accepts only a string value"
          },
          "attr": {
            "type": "string",
            "title": "Tag attribute",
            "description": "Define the tag by its attribute value. The extension will query select the defined tag and matching attribute property or value"
          },
          "ignore": {
            "type": "boolean",
            "title": "Ignore Tag",
            "default": false,
            "description": "Should this tag be skipped and ignored from formatting."
          }
        }
      }
    },
    "markup": {
      "properties": {
        "attribute_sort": {
          "type": "boolean",
          "default": false,
          "title": "Sort Attributes",
          "description": "Alphanumerically sort document attributes. Attribute sorting is ignored on tags that contain attributes template attributes"
        },
        "attribute_sort_list": {
          "type": "string",
          "title": "Sort Attribute List",
          "description": "A comma separated list of attribute names. Attributes will be sorted according to this list and then alphanumerically. This option requires \"attribute_sort\" have a value of true"
        },
        "correct": {
          "type": "boolean",
          "default": false,
          "title": "Fix Sloppy Code",
          "description": "Automatically correct some sloppiness in code"
        },
        "comments": {
          "type": "boolean",
          "default": false,
          "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code"
        },
        "force_attribute": {
          "type": "boolean",
          "default": false,
          "title": "Force Indentation of All Attributes",
          "description": "If all document attributes should be indented each onto their own line"
        },
        "format_comments": {
          "type": "string",
          "default": false,
          "description": "Control how Liquid comment are formatted"
        },
        "preserve": {
          "type": "number",
          "default": 1,
          "title": "Preserve Consecutive New Lines",
          "description": "The maximum number of consecutive empty lines to retain"
        },
        "preserve_comment": {
          "type": "boolean",
          "default": false,
          "title": "Eliminate Word Wrap Upon Comments",
          "description": "Prevent comment reformatting due to option wrap"
        },
        "preserve_text": {
          "type": "boolean",
          "default": true,
          "title": "Preserve Markup Text White Space",
          "description": "If text in the provided document code should be preserved exactly as provided. This option eliminates beautification and wrapping of text content"
        },
        "space_close": {
          "type": "boolean",
          "default": false,
          "title": "Close Markup Self-Closing Tags with a Space",
          "description": "Markup self-closing tags end will end with ' />' instead of '/>'"
        },
        "tag_whitespace": {
          "type": "string",
          "description": "Automatically apply whitespace dashes (-) to the encasing Liquid brace tags, eg: {{- -}} or {%- -%}. Please note that tags nested within HTML Attributes will not have whitespaces applied.",
          "oneOf": [
            {
              "enum": ["off"],
              "description": "Disables this rule"
            },
            {
              "enum": ["never"],
              "description": "Never applies whitespace dashes to Liquid tags, eg: \"{% tag %}\""
            },
            {
              "enum": ["always"],
              "description": "Will always apply whitespace dashes to Liquid tags, eg: \"{%- tag -%}\""
            }
          ]
        },
        "tag_padding": {
          "type": "boolean",
          "default": false,
          "description": "Apply and newline before and after content contained with tag blocks. This option is only applied to Tag Associates and Overrides"
        },
        "quote_convert": {
          "default": "none",
          "title": "Convert Quotes",
          "description": "If the quotes of script strings or document attributes should be converted to single quotes or double quotes",
          "oneOf": [
            {
              "enum": ["double"],
              "description": "Converts single quotes to double quotes"
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            },
            {
              "enum": ["single"],
              "description": "Converts double quotes to single quotes"
            }
          ]
        },
        "files": {
          "$ref": "#/definitions/files",
          "items": [
            {
              "type": "string",
              "enum": [".html"]
            }
          ]
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "style": {
      "properties": {
        "braces": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "comments": {
          "type": "boolean",
          "default": false,
          "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code"
        },
        "compressed_css": {
          "type": "boolean",
          "default": false,
          "title": "Compressed CSS",
          "description": "If CSS should be beautified in a style where the properties and values are minifed for faster reading of selectors."
        },
        "css_insert_lines": {
          "type": "boolean",
          "default": false,
          "title": "Insert Empty Lines",
          "description": "Inserts new line characters between every CSS code block."
        },
        "no_lead_zero": {
          "type": "boolean",
          "default": false,
          "title": "Leading 0s",
          "description": "Whether leading 0s in CSS values immediately preceding a decimal should be removed or prevented."
        },
        "preserve": {
          "type": "number",
          "default": 1,
          "title": "Preserve Consecutive New Lines",
          "description": "The maximum number of consecutive empty lines to retain"
        },
        "selector_list": {
          "type": "boolean",
          "default": false,
          "title": "Single Lined Selectors",
          "description": "If comma separated CSS selectors should present on a single line of code."
        },
        "files": {
          "$ref": "#/definitions/files",
          "items": [
            {
              "type": "string",
              "enum": [".css.liquid", ".css"]
            }
          ]
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "script": {
      "properties": {
        "braces": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "brace_line": {
          "type": "boolean",
          "default": false,
          "title": "Brace Lines",
          "description": "If true an empty line will be inserted after opening curly braces and before closing curly braces"
        },
        "brace_padding": {
          "type": "boolean",
          "default": false,
          "title": "Brace Padding",
          "description": "Inserts a space after the start of a container and before the end of the container if the contents of that container are not indented; such as: conditions, function arguments, and escaped sequences of template strings"
        },
        "brace_style": {
          "type": "string",
          "default": "none",
          "title": "Brace Style",
          "description": "Emulates JSBeautify's brace_style option",
          "oneOf": [
            {
              "enum": ["collapse"],
              "description": "Sets options.format_object to 'indent' and options.neverflatten to true"
            },
            {
              "enum": ["collapse-preserve-inline"],
              "description": "Sets options.bracepadding to true and options.format_object to 'inline'"
            },
            {
              "enum": ["expand"],
              "description": "Sets options.braces to true, options.format_object to 'indent', and options.never flatten to true."
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            }
          ]
        },
        "case_space": {
          "type": "boolean",
          "default": false,
          "title": "Space Following Case",
          "description": "If the colon separating a case's expression (of a switch/case block) from its statement should be followed by a space instead of indentation, thereby keeping the case on a single line of code"
        },
        "comments": {
          "type": "boolean",
          "default": false,
          "title": "Comment Indentation",
          "description": "This will determine whether comments should always start at position 0 of each line or if comments should be indented according to the code"
        },
        "else_line": {
          "type": "boolean",
          "default": false,
          "title": "Else On New Line",
          "description": "If else_line is true then the keyword 'else' is forced onto a new line."
        },
        "end_comma": {
          "type": "string",
          "default": "none",
          "title": "Trailing Comma",
          "description": "If there should be a trailing comma in arrays and objects",
          "oneOf": [
            {
              "enum": ["always"],
              "description": "Always ensure there is a tailing comma"
            },
            {
              "enum": ["never"],
              "description": "Remove trailing commas"
            },
            {
              "enum": ["none"],
              "description": "Ignore this option"
            }
          ]
        },
        "format_array": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all array indexes should be indented, never indented, or left to the default.",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each index of an array"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all array indexes appear on a single line"
            }
          ]
        },
        "format_object": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all object keys should be indented, never indented, or left to the default",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each key/value pair"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all key/value pairs appear on the same single line"
            }
          ]
        },
        "function_name": {
          "type": "boolean",
          "default": false,
          "title": "Space After Function Name",
          "description": "If a space should follow a JavaScript function name"
        },
        "method_chain": {
          "type": "number",
          "default": 3,
          "title": "Method Chains",
          "description": "When to break consecutively chained methods and properties onto separate lines. A negative value disables this option. A value of 0 ensures method chains are never broken"
        },
        "never_flatten": {
          "type": "boolean",
          "default": false,
          "title": "Never Flatten Destructured Lists",
          "description": "If destructured lists in script should never be flattend"
        },
        "no_case_indent": {
          "type": "boolean",
          "default": false,
          "title": "Case Indentation",
          "description": "If a case statement should receive the same indentation as the containing switch block."
        },
        "no_semicolon": {
          "type": "boolean",
          "default": false,
          "title": "No Semicolons",
          "description": "Removes semicolons that would be inserted by ASI. This option is in conflict with option 'correct' and takes precedence over conflicting features. Use of this option is a possible security/stability risk"
        },
        "preserve": {
          "type": "number",
          "default": 1,
          "title": "Preserve Consecutive New Lines",
          "description": "The maximum number of consecutive empty lines to retain"
        },
        "preserve_comment": {
          "type": "boolean",
          "default": false,
          "title": "Eliminate Word Wrap Upon Comments",
          "description": "Prevent comment reformatting due to option wrap"
        },
        "quote_convert": {
          "default": "none",
          "title": "Convert Quotes",
          "description": "If the quotes of script strings or document attributes should be converted to single quotes or double quotes",
          "oneOf": [
            {
              "enum": ["double"],
              "description": "Converts single quotes to double quotes"
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            },
            {
              "enum": ["single"],
              "description": "Converts double quotes to single quotes"
            }
          ]
        },
        "space": {
          "type": "boolean",
          "default": false,
          "title": "Function Space",
          "description": "Inserts a space following the function keyword for anonymous functions"
        },
        "styleguide": {
          "type": "string",
          "default": "none",
          "title": "Script Styleguide",
          "description": "Provides a collection of option presets to easily conform to popular JavaScript style guides.",
          "oneOf": [
            {
              "enum": ["none"]
            },
            {
              "enum": ["airbnb"]
            },
            {
              "enum": ["crockford"]
            },
            {
              "enum": ["google"]
            },
            {
              "enum": ["jquery"]
            },
            {
              "enum": ["mediawiki"]
            },
            {
              "enum": ["semistandard"]
            },
            {
              "enum": ["standard"]
            },
            {
              "enum": ["yandex"]
            }
          ]
        },

        "ternary_line": {
          "type": "boolean",
          "default": false,
          "title": "Keep Ternary Statements On One Line",
          "description": "If ternary operators in JavaScript ? and : should remain on the same line"
        },
        "variable_list": {
          "type": "boolean",
          "default": false,
          "title": "Variable Declaration Lists",
          "description": "If consecutive JavaScript variables should be merged into a comma separated list or if variables in a list should be separated"
        },
        "files": {
          "$ref": "#/definitions/files",
          "items": [
            {
              "type": "string",
              "enum": [".js.liquid", ".js", ".ts.liquid", ".ts"]
            }
          ]
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "json": {
      "properties": {
        "braces": {
          "type": "boolean",
          "default": false,
          "title": "Style of Indent",
          "description": "Determines if opening curly braces will exist on the same line as their condition or be forced onto a new line. (Allman style indentation)"
        },
        "brace_line": {
          "type": "boolean",
          "default": false,
          "title": "Brace Lines",
          "description": "If true an empty line will be inserted after opening curly braces and before closing curly braces"
        },
        "brace_style": {
          "type": "string",
          "default": "none",
          "title": "Brace Style",
          "description": "Emulates JSBeautify's brace_style option",
          "oneOf": [
            {
              "enum": ["collapse"],
              "description": "Sets options.format_object to 'indent' and options.neverflatten to true"
            },
            {
              "enum": ["collapse-preserve-inline"],
              "description": "Sets options.bracepadding to true and options.format_object to 'inline'"
            },
            {
              "enum": ["expand"],
              "description": "Sets options.braces to true, options.format_object to 'indent', and options.never flatten to true."
            },
            {
              "enum": ["none"],
              "description": "Ignores this option"
            }
          ]
        },
        "format_array": {
          "type": "string",
          "default": "default",
          "title": "Formatting Arrays",
          "description": "Determines if all array indexes should be indented, never indented, or left to the default.",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each index of an array"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all array indexes appear on a single line"
            }
          ]
        },
        "format_object": {
          "type": "string",
          "default": "default",
          "title": "Formatting Objects",
          "description": "Determines if all object keys should be indented, never indented, or left to the default",
          "oneOf": [
            {
              "enum": ["default"],
              "description": "Default formatting"
            },
            {
              "enum": ["indent"],
              "description": "Always indent each key/value pair"
            },
            {
              "enum": ["inline"],
              "description": "Ensure all key/value pairs appear on the same single line"
            }
          ]
        },
        "preserve": {
          "type": "number",
          "default": 1,
          "title": "Preserve Consecutive New Lines",
          "description": "The maximum number of consecutive empty lines to retain"
        },
        "files": {
          "$ref": "#/definitions/files",
          "items": [
            {
              "type": "string",
              "enum": [".json.liquid", ".json", ".liquidrc"]
            }
          ]
        },
        "tags": {
          "$ref": "#/definitions/tags"
        }
      }
    },
    "ignore": {
      "items": [
        {
          "type": "string",
          "description": "Glob pattern to files and/or directories to be ignored by the formatter"
        }
      ]
    }
  },
  "required": ["engine"],
  "properties": {
    "engine": {
      "title": "Liquid Engine",
      "description": "The Liquid variation this project is using. Default to \"Standard\" and defines the type of completion references and hover descriptions intellisense uses.",
      "$ref": "#/definitions/engine"
    },
    "validate": {
      "type": "object",
      "title": "Validations",
      "description": "Diagnostic/Linting validation to execute on Liquid syntax.",
      "properties": {
        "tag": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid tag validations",
          "$ref": "#/definitions/validateTag"
        },
        "iteration": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid iteration validations",
          "$ref": "#/definitions/validateIteration"
        },
        "control": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid control flow validations",
          "$ref": "#/definitions/validateControl"
        },
        "object": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid object validations",
          "$ref": "#/definitions/validateObject"
        },
        "filter": {
          "type": "object",
          "additionalProperties": false,
          "description": "Liquid filter validations",
          "$ref": "#/definitions/validateFilter"
        }
      }
    },
    "format": {
      "type": "object",
      "title": "Formatting",
      "description": "Formatting beautification rules and options to be applied to files and tags. Define on a per-language basis.",
      "properties": {
        "ignore": {
          "type": "array",
          "title": "Ignore Files",
          "uniqueItems": true,
          "description": "List of files/directories to be ignored from formatting",
          "$ref": "#/definitions/ignore"
        },
        "html": {
          "type": "object",
          "additionalProperties": false,
          "description": "The HTML/Liquid beautification formatting options and rules",
          "$ref": "#/definitions/markup"
        },
        "javascript": {
          "type": "object",
          "additionalProperties": false,
          "description": "JavaScript beautification formatting options and rules. Applied to any defined files, HTML <script> tags and Liquid \"javascript\" tags",
          "$ref": "#/definitions/script"
        },
        "css": {
          "type": "object",
          "additionalProperties": false,
          "description": "CSS beautification formatting options and rules. Applied to defined \"files[]\", HTML <style> tags and Liquid \"stylesheet\" / \"style\" tags",
          "$ref": "#/definitions/style"
        },
        "scss": {
          "type": "object",
          "additionalProperties": false,
          "description": "SCSS/SASS/LESS beautification formatting options and rules. Applied to defined \"files[]\" and Liquid \"stylesheet 'scss'\" tags",
          "$ref": "#/definitions/style"
        },
        "json": {
          "type": "object",
          "additionalProperties": false,
          "description": "JSON beautification formattingoptions and rules. Applied to any defined files, HTML <script type=\"application/json\"> tags and Liquid \"schema\" tags",
          "$ref": "#/definitions/json"
        }
      }
    }
  }
}
