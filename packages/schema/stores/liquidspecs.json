{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "shopify-section-schema",
  "version": 1.1,
  "type": "object",
  "title": "Shopify Section Schema (Liquid Langauge Server)",
  "description": "Shopify schema store reference for the schema Liquid tag used in Shopify themes.",
  "definitions": {
    "engine": {
      "title": "Engine",
      "description": "The Liquid Variation Engine name for this specification",
      "type": "string"
    },
    "updated": {
      "title": "Last Updated",
      "description": "The data this specification was last updated",
      "type": "string",
      "pattern": "\\d{2}\\-\\d{2}\\-\\d{4}"
    },
    "arg_options": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the accepted argument option"
          },
          "description": {
            "type": "string",
            "description": "The Description of the accepted argument option"
          }
        }
      }
    },
    "arg_required": {
      "type": "boolean",
      "description": "Whether the argument value is optional or required. Some Liquid filters require an argument be passed, as an example the replace filter requires 2 arguments be passed."
    },
    "arg_types": {
      "type": "string",
      "description": "Name of the type of setting.",
      "oneOf": [
        {
          "enum": ["argument"],
          "description": "The value passed for a filter with type argument would be either a string, number, boolean, or reference. For example:\n\n{{ tag | filter: 'argument' }}\n{{ tag | filter: 10 }}\n\n>"
        },
        {
          "enum": ["parameter"],
          "description": "Representative of nested parameter value, where the filter argument accepts a property-like argument. The value passed for a filter with type paraemeter, for example:\n\n{{ tag | filter: foo: 'bar' }}\n{{ tag | filter: 'foo', bar: bar }}\n\n>"
        },
        {
          "enum": ["spread"],
          "description": "The value passed for a filter with type spread \"spread\" to a sequence of argument types where the first argument equates to a key and the second argument a value. The match can infer a property-modifier or key-value with filter arguments.\n\nThis filter approach is used in the Shopify Liquid Variation but it is also seen in Jekyll and Eleventy variations plugins.\n\nExample:\n\n> {{ tag | filter: 'weight', 'bold' }}\n\nIn the tag above, the first argument with value 'weight' refers to a property or key and 'bold' refers to value/modifier but this is not always certain. We could also pass the following:\n\n> {{ tag | filter: 'style', 'italic' }}\n\nAbove we are providing a new spread, this time we pass 'style' as a key/property and 'italic' as our value. You could even chain the filters on a single tag, for example:\n\n> {{ tag | filter: 'weight', 'bold' | filter: 'style', 'italic' }}\n\nWhen filter arguments appropriate such logic we can specify using the \"spread\" type.\nRefer to Shopify font_modify filter for more information:\nhttps://shopify.dev/docs/themes/liquid/reference/filters/font-filters#font_modify"
        }
      ]
    },
    "arg_argument": {
      "if": {
        "properties": {
          "type": {
            "const": "argument"
          }
        }
      },
      "then": {
        "propertyNames": {
          "pattern": "type|accepts|required|options|description"
        },
        "required": ["accepts"],
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the argument. This will show as the description of this argument value in completions and hovers."
          },
          "accepts": {
            "$ref": "#/definitions/filter_types"
          },
          "required": {
            "$ref": "#/definitions/arg_required"
          },
          "options": {
            "description": "An optional list of default argument values.",
            "$ref": "#/definitions/arg_options"
          }
        }
      }
    },
    "arg_parameters": {
      "if": {
        "properties": {
          "type": {
            "const": "parameter"
          }
        }
      },
      "then": {
        "propertyNames": {
          "pattern": "type|accepts|required|options|name|description"
        },
        "required": ["name", "accepts"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the argument parameter. This will also be provided in completions."
          },
          "description": {
            "type": "string",
            "description": "Description of the parameter argument. This will show as the description of this parameter in completions."
          },
          "accepts": {
            "$ref": "#/definitions/filter_types"
          },
          "required": {
            "$ref": "#/definitions/arg_required"
          },
          "options": {
            "$ref": "#/definitions/arg_options"
          }
        }
      }
    },
    "arg_spread": {
      "if": {
        "properties": {
          "type": {
            "const": "spread"
          }
        }
      },
      "then": {
        "type": "object",
        "required": ["name", "arguments"],
        "propertyNames": {
          "pattern": "type|accepts|arguments|name|description"
        },
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the argument. Considered the \"key\" or \"property\" entry. This will be the first argument name."
          },
          "description": {
            "type": "string",
            "description": "Description of the \"spread\" argument. This will be rendered as a descriptor on the first argument when a mouse hovers it."
          },
          "accepts": {
            "$ref": "#/definitions/filter_types"
          },
          "arguments": {
            "type": "array",
            "description": "Each argument in the is array list will represent a value proceeding the first (which we defined in \"name\" and each will parsed from left to right, for example:\n\n>{{ tag | filter: 'name', 'arg1', 'arg2' }}\n\nWhere arguments listed in this array represent \"arg1\", \"arg2\" etc etc.",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Description of the spread argument property value/s. This will be rendered for each argument as a hover descriptor."
                },
                "accepts": {
                  "$ref": "#/definitions/filter_types"
                },
                "options": {
                  "description": "List of optional arguments this match value can accept",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "propertyNames": {
                      "pattern": "name|description"
                    },
                    "properties": {
                      "name": {
                        "type": ["string", "array"],
                        "description": "The name of the accepted argument option. Accepts an array of names for options that share the same description but different values."
                      },
                      "description": {
                        "type": "string",
                        "description": "The Description of the accepted argument option"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "object_types": {
      "type": "string",
      "description": "The valueof type of this object. This refers to what the object holds. This is used to validate whether the value can be iterated.\n\n Please note that the type property here is completely different from type property found in filter arguments.",
      "oneOf": [
        {
          "enum": ["object"],
          "type": "string",
          "description": "Representative of an object which has property values. When declaring an \"object\" type it is expect it has \"property\" references."
        },
        {
          "enum": ["number"],
          "type": "string",
          "description": "Representative of a number value, eg: 100"
        },
        {
          "enum": ["boolean"],
          "type": "string",
          "description": "Representative of a boolean value, eg: \"true\" or \"false\""
        },
        {
          "enum": ["variable"],
          "type": "string",
          "description": "Representative of constantant variable"
        },
        {
          "enum": ["string"],
          "type": "string",
          "description": "Representative of a string value."
        },
        {
          "enum": ["array"],
          "type": "string",
          "description": "Representative of an array value. Such a type is allowed to be iterated."
        }
      ]
    },
    "object_properties": {
      "type": "array",
      "items": {
        "type": "object",
        "propertyNames": {
          "pattern": "name|description|type|properties"
        },
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the property the object provides."
          },
          "description": {
            "type": "string",
            "description": "The description of the property"
          },
          "type": {
            "$ref": "#/definitions/object_types"
          },
          "properties": {
            "if": {
              "properties": {
                "type": {
                  "const": "object"
                }
              }
            },
            "then": {
              "description": "The object properties",
              "$ref": "#/definitions/object_properties",
              "default": [
                {
                  "name": ""
                }
              ]
            }
          }
        }
      }
    },
    "filter_types": {
      "type": "array",
      "description": "A List of meta-syntax keywords in which represent value types this argument will accept.",
      "uniqueItems": true,
      "additionalItems": false,
      "items": {
        "type": "string",
        "oneOf": [
          {
            "enum": ["string"],
            "type": "string",
            "description": "Representative of a string wrapped in quotation characters, eg: 'foo' or \"foo\""
          },
          {
            "enum": ["number"],
            "type": "string",
            "description": "Representative of a number value, eg: 100"
          },
          {
            "enum": ["boolean"],
            "type": "string",
            "description": "Representative of a boolean value, eg: true or false"
          },
          {
            "enum": ["reference"],
            "type": "string",
            "description": "Passing reference means the argument can accept a Liquid variable or Liquid object value. For example:\n\n{% assign var = 'foo' %}\n{{ tag | append: var }}\nOR\n{{ tag | replace: 'foo', object.prop }}\n\nWhen you assert a filter argument to accept a reference you cover both edge cases."
          },
          {
            "enum": ["path"],
            "type": "string",
            "description": "Representative of path value. Not valid in Shopify Variation. Path values can either start with a forward slash character or contain a forward slash character. Path keyword types are generally found within the Jekyll and Eleventy variations, for example:\n\n>{% link _posts/2016-07-26-name-of-post.md %}"
          }
        ]
      }
    },
    "filters": {
      "type": "object",
      "additionalProperties": {
        "additionalProperties": false,
        "required": ["description"],
        "properties": {
          "description": {
            "description": "Description of the Filter",
            "type": "string"
          },
          "snippet": {
            "type": "string",
            "description": "Optional VSCode Snippet string for the filter"
          },
          "link": {
            "description": "URL reference to online documentation explaining this filter.",
            "pattern": "https\\:.*?"
          },
          "within": {
            "description": "When the filter is available within specific object and/or tag names the should be included here. The filter will only be made available to those listed.",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "\\b[a-zA-Z_-]+"
            }
          },
          "arguments": {
            "description": "Filter argument values.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/definitions/arg_types"
                }
              },
              "allOf": [
                {
                  "$ref": "#/definitions/arg_argument"
                },
                {
                  "$ref": "#/definitions/arg_parameters"
                },
                {
                  "$ref": "#/definitions/arg_spread"
                }
              ]
            }
          }
        }
      },
      "propertyNames": {
        "pattern": "^[A-Za-z0-9_]*$"
      }
    },
    "tag_types": {
      "type": "string",
      "description": "The valueof type of this object. This refers to what the object holds. This is used to validate whether the value can be iterated.\n\n Please note that the type property here is completely different from type property found in filter arguments.",
      "oneOf": [
        {
          "enum": ["control"],
          "type": "string",
          "description": "Control type tags describe conditional based control, like the \"if\" or \"unless\" block based execution tags."
        },
        {
          "enum": ["comment"],
          "type": "string",
          "description": "Comment type tags"
        },
        {
          "enum": ["embedded"],
          "type": "string",
          "description": "Tags whos contents contains an embedded language."
        },
        {
          "enum": ["import"],
          "type": "string",
          "description": "Tags which import templates, for example the \"render\" or \"include\" tag used for partial injections."
        },
        {
          "enum": ["iteration"],
          "type": "string",
          "description": "Iteration type tags used to looping over collections or an array of items."
        },
        {
          "enum": ["output"],
          "type": "string",
          "description": "Output type tags used to print markup or other data."
        },
        {
          "enum": ["variable"],
          "type": "string",
          "description": "Variable tags which allow for assignment, for example the \"assign\" or \"capture\" tags,"
        },
        {
          "enum": ["raw"],
          "type": "string",
          "description": "The tags whos contents need not parsing, for example the \"raw\" tag."
        }
      ]
    },
    "tag_parameter_types": {
      "type": "array",
      "description": "A List of meta-syntax keywords in which represent value types a tag parameter will accept.",
      "uniqueItems": true,
      "additionalItems": false,
      "items": {
        "type": "string",
        "oneOf": [
          {
            "enum": ["keyword"],
            "type": "string",
            "description": "Representative of a keyword value only, ie: \"reverse\" in \"{% for i in tags reverse %}\" is classified as a keyword. We must explicitly assert it."
          },
          {
            "enum": ["string"],
            "type": "string",
            "description": "Representative of a string wrapped in quotation characters, eg: 'foo' or \"foo\""
          },
          {
            "enum": ["number"],
            "type": "string",
            "description": "Representative of a number value, eg: 100"
          },
          {
            "enum": ["boolean"],
            "type": "string",
            "description": "Representative of a boolean value, eg: true or false"
          },
          {
            "enum": ["reference"],
            "type": "string",
            "description": "Passing reference means the argument can accept a Liquid variable or Liquid object value. For example:\n\n{% assign var = 10 %}\n{% for i in tags offset: var }}\n\nWhen you assert a parameter to accept a reference you cover both cases for object or variable"
          }
        ]
      }
    },
    "objects": {
      "type": "object",
      "description": "List of object specifications available to the defined engines variation",
      "additionalProperties": {
        "required": ["description", "type"],
        "properties": {
          "type": {
            "$ref": "#/definitions/object_types",
            "default": "object"
          },
          "deprecated": {
            "type": "boolean",
            "description": "Whether this object is deprecated of not, defaults to \"false\" and can be omitted unless otherwise required."
          },
          "description": {
            "description": "Description of this Object",
            "type": "string"
          },
          "filters": {
            "description": "Whether or not this object value can be use within filters. In some cases, object tags or variable based objects do not accept filters. Some objects in a Variation like Shopify hold \"constanant\" variable state, if an object is defined as such it unlikely it can be used or contain filters. All objects are assumed to be accept and be used within filters, so this field defaults to \"true\" and can be omitted unless otherwise required.",
            "type": "boolean",
            "default": false
          },
          "link": {
            "description": "URL reference to online documentation explaining this object.",
            "pattern": "https\\:.*?",
            "type": "string"
          },
          "trim": {
            "description": "Whether or not this object value can use whitespace dash trim delimiters. Some objects in a Variation like Shopify hold \"constanant\" variable state, if an object is defined as such it unlikely filters are allowed.",
            "type": "boolean"
          },
          "global": {
            "description": "Whether or not this object is a global value. Global values are accessible from any template or file. All objects are assumed to no global scope, so this field defaults to \"false\" and can be omitted unless otherwise required.",
            "type": "boolean",
            "default": true
          },
          "const": {
            "description": "Whether or not this object is a content or constanant value. In some cases, object tags are variable based objects used to output content of templates files and in the Shopify Variation this includes scripts and stylesheets. Some objects in a variations like Shopify hold a \"constanant\" variable state. If an object is defined as such then its unlikely filters or trims are allowed and thus when a object has a const \"true\" value assigned, then both \"trim\" and \"filters\" are assumed to \"false\" and if otherwise not, you will need to explicity set them to \"true\" when this field is true.\n\nand All objects are assumed to not be a \"const\" values, so this field defaults to \"false\" and can be omitted unless otherwise required.",
            "type": "boolean",
            "default": false
          },
          "scope": {
            "description": "Some objects are accessible within tag based scope. For example, the \"{{ form }}\" object available in the Shopify Liquid variation is a scope based tag and must be used within a \"{% form %}\" tag. When an object is scope based include the name of tag scope in this field.",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "\\b[a-zA-Z_-]+"
            }
          },
          "properties": {
            "$ref": "#/definitions/object_properties",
            "description": "List of properties pertaining to the object. When the property the property asserts a type \"object\" you will nest its properties in a recursive manner.",
            "default": [{}]
          }
        }
      }
    },
    "tags": {
      "type": "object",
      "description": "List of tag specification. Each Tag spec attempts to describe the context and formation of a Liquid tag.",
      "additionalProperties": {
        "required": ["description", "type"],
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/definitions/tag_types",
            "default": "object"
          },
          "snippet": {
            "type": "string",
            "description": "Optional VSCode Snippet string for the tag"
          },
          "deprecated": {
            "type": "boolean",
            "description": "Whether this tag is deprecated of not, defaults to \"false\" and can be omitted unless otherwise required."
          },
          "description": {
            "description": "Description of this tag",
            "type": "string"
          },
          "filters": {
            "description": "Whether or not this tag accepts filters. In most cases, tags do not accept filters. All tags are assumed to not accept filters, so this field defaults to \"false\" and can be omitted unless otherwise required.",
            "type": "boolean",
            "default": false
          },
          "link": {
            "description": "URL reference to online documentation explaining this tag.",
            "pattern": "https\\:.*?",
            "type": "string"
          },
          "language": {
            "type": "string",
            "description": "The language name. Used for embedded blocks"
          },
          "singular": {
            "type": "boolean",
            "description": "Whether this tag can expressed in a singular form, ie: no requiring an \"{% endtag %}\". Tags like the \"{% assign var = '' %}\" fall into the \"singular\" tag category.",
            "default": true
          },
          "trims": {
            "description": "Whether or not this tag can use whitespace dash trim delimiters. Some tags in a Variation like Shopify do not allow this but generally most if not all do. Defaults to \"true\" and can be omitted unless otherwise required.",
            "type": "boolean",
            "default": false
          },
          "scope": {
            "description": "Some tags are accessible within a tag based scope. For example, the \"{% break %}\" tag is a scope based tag and must be used within a \"{% for %}\" tag. When a tag is scope based include the name of parental scope in this field.",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "\\b[a-zA-Z_-]+"
            }
          },
          "parameters": {
            "type": ["array"],
            "description": "List of parameter values the tag accepts. Tag parameters in Liquid variations are either seperated by a comma or space and (generally) found at the end of tag expressions, eg:\n\n>{% for i in items offset: 10 %}\n\nThe \"for\" tag parameters match \"offset: 10\" in the above example.",
            "items": {
              "propertyNames": {
                "pattern": "accepts|required|name|description"
              },
              "required": ["name", "accepts"],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the argument parameter. This will also be provided in completions."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the parameter argument. This will show as the description of this parameter in completions."
                },
                "accepts": {
                  "$ref": "#/definitions/tag_parameter_types"
                },
                "required": {
                  "$ref": "#/definitions/arg_required"
                }
              }
            }
          },
          "arguments": {
            "description": "Filter argument values.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the argument parameter. This will also be provided in completions."
                },
                "description": {
                  "type": "string",
                  "description": "Description of the parameter argument. This will show as the description of this parameter in completions."
                }
              }
            }
          }
        }
      }
    }
  },
  "required": ["engine", "updated"],
  "additionalProperties": false,
  "properties": {
    "engine": {
      "$ref": "#/definitions/engine"
    },
    "updated": {
      "$ref": "#/definitions/updated"
    },
    "filters": {
      "$ref": "#/definitions/filters"
    },
    "objects": {
      "$ref": "#/definitions/objects"
    },
    "tags": {
      "$ref": "#/definitions/tags"
    }
  }
}
