{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "shopify-section-schema",
  "version": 1.1,
  "type": "object",
  "title": "Shopify Section Schema (Liquid Langauge Server)",
  "description": "Shopify schema store reference for the schema Liquid tag used in Shopify themes.",
  "definitions": {
    "engine": {
      "title": "Engine",
      "description": "The Liquid Variation Engine name for this specification",
      "type": "string"
    },
    "updated": {
      "title": "Last Updated",
      "description": "The data this specification was last updated",
      "type": "string",
      "pattern": "\\d{2}\\-\\d{2}\\-\\d{4}"
    },
    "filters": {
      "type": "object",
      "additionalProperties": {
        "additionalProperties": false,
        "required": [
          "description"
        ],
        "properties": {
          "description": {
            "description": "Description of the Filter",
            "type": "string"
          },
          "snippet": {
            "type": "string",
            "description": "An optional VSCode Snippet string for the filter"
          },
          "link": {
            "description": "An URL reference to online documentation explaining this filter.",
            "pattern": "https\\:.*?"
          },
          "arguments": {
            "description": "Argument/Parameters this filter uses or requires",
            "type": "array",
            "items": {
              "type": "object",
              "description": "Lists all settings that are available for this theme section",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Name of the type of setting.",
                  "oneOf": [
                    {
                      "enum": [
                        "argument"
                      ],
                      "description": "The value passed for a filter with type argument would be either a string, number, boolean, or $reference. For example:\n\n{{ tag | filter: 'argument' }}\n{{ tag | filter: 10 }}\n\n>"
                    },
                    {
                      "enum": [
                        "parameter"
                      ],
                      "description": "Representative of nested parameter value, where the filter argument accepts a property-like argument. The value passed for a filter with type paraemeter, for example:\n\n{{ tag | filter: foo: 'bar' }}\n{{ tag | filter: 'foo', bar: bar }}\n\n>"
                    },
                    {
                      "enum": [
                        "spread"
                      ],
                      "description": "The value passed for a filter with type spread refers to a sequence of argument types where the first argument equates to a key and the second argument a value. The spread infers property - modifier.\n\nThis filter approach is used in the Shopify Liquid Variation but it is also seen in Jekyll and Eleventy variations plugins.\n\nExample:\n\n> {{ tag | filter: 'weight', 'bold' }}\n\nIn the tag above, the first argument with value 'weight' refers to a property or key and 'bold' refers to value/modifier but this is not always certain. We could also pass the following:\n\n> {{ tag | filter: 'style', 'italic' }}\n\nAbove we are providing a new spread, this time we pass 'style' as a key/property and 'italic' as our value. You could even chain the filters on a single tag, for example:\n\n> {{ tag | filter: 'weight', 'bold' | filter: 'style', 'italic' }}\n\nWhen filter arguments appropriate such logic we can specify using the spread type.\nRefer to Shopify font_modify filter for more information:\nhttps://shopify.dev/docs/themes/liquid/reference/filters/font-filters#font_modify"
                    }
                  ]
                },
                "accepts": {
                  "type": "array",
                  "description": "A List of meta-syntax keywords in which represent value types this argument will accept.",
                  "uniqueItems": true,
                  "additionalItems": false,
                  "items": {
                    "type": "string",
                    "oneOf": [
                      {
                        "enum": [
                          "$string"
                        ],
                        "type": "string",
                        "description": "Representative of a string wrapped in quotation characters, eg: 'foo' or \"foo\""
                      },
                      {
                        "enum": [
                          "$boolean"
                        ],
                        "type": "string",
                        "description": "Representative of a number value, eg: 100"
                      },
                      {
                        "enum": [
                          "$boolean"
                        ],
                        "type": "string",
                        "description": "Representative of a boolean value, eg: true or false"
                      },
                      {
                        "enum": [
                          "$reference"
                        ],
                        "type": "string",
                        "description": "Passing reference means the argument can accept a Liquid variable or Liquid object value. For example:\n\n{% assign var = 'foo' %}\n{{ tag | append: var }}\nOR\n{{ tag | replace: 'foo', object.prop }}\n\nWhen you assert a filter argument to accept this type you will be covering both edge cases."
                      }
                    ]
                  }
                },
                "required": {
                  "type": "boolean",
                  "description": "Whether this argument value is optional or required. Some Liquid filters require an argument be passed, life for example the repalce filter, which requires 2 arguments be passed."
                },
                "options": {
                  "type": "array",
                  "description": "A list of pre-defined options the argument accepts. These will be shown as completions in text editors.",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of argument option"
                      },
                      "description": {
                        "type": "string",
                        "description": "Include an description of this argument value"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "propertyNames": {
        "pattern": "^[A-Za-z0-9_]*$"
      }
    },
    "objects": {},
    "tags": {}
  },
  "required": [
    "engine",
    "updated"
  ],
  "additionalProperties": false,
  "properties": {
    "engine": {
      "$ref": "#/definitions/engine"
    },
    "updated": {
      "$ref": "#/definitions/updated"
    },
    "filters": {
      "$ref": "#/definitions/filters"
    },
    "objects": {
      "$ref": "#/definitions/objects"
    },
    "tags": {
      "$ref": "#/definitions/tags"
    }
  }
}
